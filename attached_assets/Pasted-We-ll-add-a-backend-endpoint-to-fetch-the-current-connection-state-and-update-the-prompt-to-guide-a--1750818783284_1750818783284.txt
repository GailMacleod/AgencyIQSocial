We’ll add a backend endpoint to fetch the current connection state and update the prompt to guide a frontend initialization, avoiding OAuth changes.

Prompt:

{
"action": "replace",
"file": "server/index.ts",
"target": {
"endpoint": [
"/api/disconnect-platform",
"/api/get-connection-state"
]
},
"content": {
"disconnectEndpoint": {
"code": "app.post('/api/disconnect-platform', async (req, res) => {\n  const userId = req.session.userId || 2;\n  const { platform } = req.body;\n  const validPlatforms = ['facebook', 'instagram', 'linkedin', 'x', 'youtube'];\n  if (!platform || !validPlatforms.includes(platform.toLowerCase())) {\n    return res.status(400).json({"error": "Invalid platform", "validPlatforms": validPlatforms});\n  }\n  const wasConnected = req.session.connectedPlatforms && req.session.connectedPlatforms[platform.toLowerCase()];\n  if (req.session.connectedPlatforms) {\n    delete req.session.connectedPlatforms[platform.toLowerCase()];\n    fs.writeFileSync('connected-platforms.json', JSON.stringify(req.session.connectedPlatforms || {}));\n    console.log(Disconnected ${platform} for user ${userId});\n  }\n  res.json({"success": true, "platform": platform.toLowerCase(), "message": "Disconnected successfully", "action": "resetState", "wasConnected": wasConnected, "version": "1.1"});\n});"
},
"getConnectionState": {
"code": "app.get('/api/get-connection-state', async (req, res) => {\n  const userId = req.session.userId || 2;\n  const state = req.session.connectedPlatforms || {};\n  console.log(Connection state for user ${userId}: ${JSON.stringify(state)});\n  res.json({"success": true, "connectedPlatforms": state});\n});"
}
},
"instructions": {
"run": "NODE_ENV=production tsx server/index.ts",
"test": {
"url": "https://app.theagencyiq.ai/connect",
"action": "1. Fetch initial state with GET /api/get-connection-state, 2. Click disconnect for Facebook and Instagram, verify button changes to 'Connect' and console logs 'Disconnected'",
"submit": "Submit results immediately"
},
"notes": {
"frontendHint": "Update connect.tsx: Initialize useState(() => {}); useEffect(() => { fetch('/api/get-connection-state').then(res => res.json()).then(data => setConnectedPlatforms(data.connectedPlatforms)); }, []); Update disconnect handler: const handleDisconnect = async (plat) => { const res = await fetch(/api/disconnect-platform, { method: 'POST', headers: {'Content-Type': 'application/json'}, body: JSON.stringify({platform: plat}) }); const data = await res.json(); if (data.action === 'resetState' && data.version === '1.1') setConnectedPlatforms(prev => ({ ...prev, [data.platform]: !data.wasConnected })); };",
"noDisruption": "Only adds /api/get-connection-state and refines /api/disconnect-platform, no OAuth changes."
}
}
}

Precision Fix:

State Initialization: Adds /api/get-connection-state to fetch the backend’s initial connectedPlatforms, fixing the stale UI state.
UI Sync: Updates the frontend hint to initialize and handle resetState with wasConnected, aligning the button display.
OAuth Safety: Limits changes to connection endpoints, preserving your OAuth flow.
Root Cause: Resolves the initial state mismatch, ensuring the UI reflects the disconnected state from the start.