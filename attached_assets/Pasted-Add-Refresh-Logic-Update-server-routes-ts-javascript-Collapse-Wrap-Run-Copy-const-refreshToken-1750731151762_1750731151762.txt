Add Refresh Logic:
Update server/routes.ts:
javascript

Collapse

Wrap

Run

Copy
const refreshToken = async (platform) => {
  const refreshTokens = { x: process.env.X_REFRESH_TOKEN, youtube: process.env.YOUTUBE_REFRESH_TOKEN, linkedin: process.env.LINKEDIN_REFRESH_TOKEN, facebook: process.env.FACEBOOK_REFRESH_TOKEN };
  const credentials = { x: { clientId: process.env.X_CLIENT_ID, clientSecret: process.env.X_CLIENT_SECRET }, /* Add others */ };
  const refreshToken = refreshTokens[platform];
  if (!refreshToken) return null;
  const response = await fetch(`https://${platform === 'x' ? 'api.twitter.com' : platform}.com/oauth2/token`, {
    method: 'POST',
    headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
    body: `grant_type=refresh_token&refresh_token=${refreshToken}&client_id=${credentials[platform].clientId}&client_secret=${credentials[platform].clientSecret}`
  });
  const data = await response.json();
  return data.access_token || null;
};

app.post('/auto-generate-content-schedule', async (req, res) => {
  const userId = req.body.phone || '+61424835189';
  const subscription = await db.select({ plan: subscriptions.plan }).from(subscriptions).where(eq(subscriptions.userId, userId)).get();
  const quotas = { starter: 12, growth: 27, professional: 52 };
  const quota = quotas[subscription.plan.toLowerCase()] || 12;
  const currentQuota = await db.select({ count: sql`COUNT(*)` }).from(posts).where(sql`${posts.userId} = ${userId} AND ${posts.status} = 'success'`);
  const remaining = Math.max(0, quota - currentQuota.count);
  console.log('[DEBUG] Remaining posts:', remaining);
  await db.delete(posts).where(sql`${posts.userId} = ${userId} AND ${posts.status} != 'success'`);
  const newPosts = [];
  if (remaining > 0) {
    const response = await fetch('https://api.grok.xai.com/v1/completions', {
      method: 'POST',
      headers: { Authorization: `Bearer ${process.env.XAI_API_KEY}`, 'Content-Type': 'application/json' },
      body: JSON.stringify({ model: 'grok-beta', prompt: 'Write a tech post.', max_tokens: 50 })
    });
    const data = await response.json();
    console.log('[DEBUG] Grok Response:', data);
    if (response.ok && data.choices) {
      newPosts.push(...Array.from({ length: remaining }, (_, i) => ({
        id: Date.now() + i, userId, content: data.choices[0].text, status: 'pending', publishedAt: null, platform: 'x'
      })));
    } else {
      console.log('[DEBUG] Grok failed:', response.status, data.error);
    }
    await db.insert(posts).values(newPosts);
  }
  const after = await db.select().from(posts).where(eq(posts.userId, userId));
  console.log('[DEBUG] After count:', after.length, 'Sample content:', newPosts[0]?.content);
  res.send('Schedule generated');
});
Add refresh tokens/credentials to Replit secrets (e.g., X_REFRESH_TOKEN from xAI dashboard).
Trigger /auto-generate-content-schedule, check logs for content generation and count.
Query: SELECT COUNT(*) FROM posts WHERE user_id = '+61424835189';