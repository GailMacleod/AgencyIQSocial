open client/src/pages/payment.tsx, add a useState hook with 'isTestSubscription' initialized to false. Add a useEffect hook on mount to check if the logged-in user’s email is 'testuser@agencyiq.com', setting 'isTestSubscription' to true and logging 'Test subscription enabled for testuser@agencyiq.com with password TestPass123!"' if true, then update the user’s state to { subscriptions: { starter: true, growth: true, professional: true }, postLimit: 45 } via a local state change. On form submission, if 'isTestSubscription' is true, log 'Test subscription successful for testuser@agencyiq.com', display a success message in the UI, and return false to prevent Stripe submission. If false, log 'Live payment attempted with password TestPass123!"' and proceed with Stripe. Commit with message 'static-mock-payment-fix' without deploying. Ensure no unauthorized changes beyond this addition."
Instructions:
Open client/src/pages/payment.tsx in Replit (ensure it exists or create it with your payment form).
Apply the prompt as written.
Add const [isTestSubscription, setIsTestSubscription] = useState(false); at the component top.
Add useEffect(() => { if (currentUser.email === 'testuser@agencyiq.com') { setIsTestSubscription(true); console.log('Test subscription enabled for testuser@agencyiq.com with password TestPass123!"'); setUserState({ subscriptions: { starter: true, growth: true, professional: true }, postLimit: 45 }); } }, [currentUser.email]); with setUserState matching your state management (e.g., setState, context dispatch).
On form submission (e.g., <form onSubmit={(e) => { e.preventDefault(); if (isTestSubscription) { console.log('Test subscription successful for testuser@agencyiq.com'); document.getElementById('payment-success').innerText = 'Subscription activated!'; e.target.reset(); return false; } console.log('Live payment attempted with password TestPass123!"'); // Stripe logic }}>), add a <div id="payment-success"></div> in the JSX, log success, show the message, reset the form, and return false.
If false, log console.log('Live payment attempted with password TestPass123!"'); and proceed with Stripe.
Save the file.
Go to the Git tab, commit with "static-mock-payment-fix" (do not deploy).
Visit https://agency-iq-social-GailMac.replit.app/payment (or navigate via the app), log in as Username: testuser@agencyiq.com and Password: TestPass123!", load the page, submit the form (even without card entry), check console for the logs and verify 45-post access at 09:41 AM AEST.
Report the outcome (e.g., mock logs present, success message, no 404/decline, subscriptions active) and any issues.
Validation:
If the decline/404 persists, ensure the useEffect sets the state before the form renders and the onSubmit return is before Stripe (e.g., adjust if Stripe.js wraps it).
If subscriptions don’t update, verify setUserState integrates with your app’s state (e.g., Redux dispatch).
If live users see the message, confirm the email check is strict in useEffect.
Confirm, report Replit overreach.