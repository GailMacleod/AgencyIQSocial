Server Compartment (server/)
Prompt: "Finalize server/PostQuotaService.ts: Implement a dynamic 30-day cycle from each customer’s subscription date, enforcing 52 posts per 10 customers (520 total) with postApproved() deducting quota only post-publishing. Integrate eventSchedulingService.ts to fetch Queensland events (e.g., Ekka July 9-19) within each user’s 30-day window. Update server/auto-posting-enforcer.ts to publish 52 posts per user to platforms (Facebook, Instagram, LinkedIn, YouTube, X) using existing API credentials, logging 520 successes/failures in data/quota-debug.log. Add /api/notify-expired for failed posts. Step 1: Fix any syntax errors, test build with npm run build. Step 2: Integrate and test 52 posts for one user, verify in data/quota-debug.log. Step 3: Test with npx tsx test-comprehensive-quota-fix.js (6/6 pass) for 10 users with start dates (July 3, 5, 10, 15, 20). Explain validation steps."
2. Client Compartment (client/src/pages/)
Prompt: "Finalize client/src/pages/intelligent-schedule.tsx: Sync calendar and list views with AEST timezone, displaying 520 posted contents. Add a loading spinner for approvals and confirmation modal for publishes. Ensure mobile readability with <meta name='viewport' content='width=device-width, initial-scale=1.0'> in index.html. Step 1: Sync views, test with 10 approvals. Step 2: Add UX elements, test across devices. Verify 520 posts display."
3. Services Compartment (server/services/)
Prompt: "Finalize eventSchedulingService.ts: Validate 520 event-driven posts with 1-2/day distribution per user using Queensland events. Ensure server/grok.ts aligns with SME automation. Step 1: Fetch events, test 52 posts. Step 2: Validate 520 posts, log distribution."
4. Tests Compartment (test/)
Prompt: "Finalize test-comprehensive-quota-fix.js: Simulate 10 customers with 520 posts, including edge cases (100 concurrent requests, 53-post exceed, event outage, session timeout, invalid input). Add test-platform-sync.js for API failures. Step 1: Run 520-post test, ensure 6/6 pass. Step 2: Test edge cases, log all results."
5. Deployment Compartment (deploy.sh, replit.md)
Prompt: "Finalize deploy.sh with pre-check (curl http://localhost:5000/api/health), server restart, and post-deployment validation (520 posts visible). In replit.md, document all fixes, schema alignment, UX enhancements, and test results. Run ./deploy.sh post-test. Manually verify 520 posts on platforms."