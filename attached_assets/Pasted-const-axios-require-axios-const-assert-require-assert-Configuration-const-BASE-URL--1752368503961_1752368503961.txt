const axios = require('axios');
const assert = require('assert');

// Configuration
const BASE_URL = 'http://localhost:3000'; // Replace with your app's URL
const TEST_EMAIL = 'gailm@macleodglba.com.au';
const TEST_PASSWORD = 'securePassword123'; // Replace with actual password
const TEST_USER_ID = 2;

// API client with session persistence
const api = axios.create({
  baseURL: BASE_URL,
  withCredentials: true, // Persist cookies for session
});

async function runEndToEndTest() {
  try {
    console.log('Starting end-to-end test...');

    // 1. Sign-up (or login if user exists)
    console.log('Testing sign-up/login...');
    let loginRes;
    try {
      loginRes = await api.post('/login', {
        email: TEST_EMAIL,
        password: TEST_PASSWORD,
      });
      assert.strictEqual(loginRes.status, 200, 'Login failed');
      assert.strictEqual(loginRes.data.message.includes(TEST_EMAIL), true, 'Session not established');
      console.log('‚úÖ Login successful');
    } catch (err) {
      if (err.response?.status === 401) {
        // Simulate sign-up if user doesn't exist
        const signupRes = await api.post('/signup', {
          email: TEST_EMAIL,
          password: TEST_PASSWORD,
          name: 'Gail Mac',
        });
        assert.strictEqual(signupRes.status, 201, 'Sign-up failed');
        console.log('‚úÖ Sign-up successful');
        loginRes = await api.post('/login', {
          email: TEST_EMAIL,
          password: TEST_PASSWORD,
        });
        assert.strictEqual(loginRes.status, 200, 'Post-signup login failed');
        console.log('‚úÖ Post-signup login successful');
      } else {
        throw err;
      }
    }

    // 2. Verify subscription status
    console.log('Testing subscription status...');
    const subscriptionRes = await api.get('/api/subscription');
    assert.strictEqual(subscriptionRes.status, 200, 'Subscription check failed');
    assert.strictEqual(subscriptionRes.data.userId, TEST_USER_ID, 'User ID mismatch');
    assert.strictEqual(subscriptionRes.data.plan, 'professional', 'Invalid subscription plan');
    assert.strictEqual(subscriptionRes.data.active, true, 'Subscription not active');
    console.log('‚úÖ Subscription verified: Professional plan, active');

    // 3. Create a post within quota
    console.log('Testing post creation...');
    const postRes = await api.post('/api/posts', {
      content: 'Test post for end-to-end testing',
      platform: 'twitter',
    });
    assert.strictEqual(postRes.status, 201, 'Post creation failed');
    const postId = postRes.data.id;
    assert(postId, 'Post ID not returned');
    console.log('‚úÖ Post created successfully');

    // 4. Verify post quota
    console.log('Testing post quota...');
    const quotaRes = await api.get('/api/quota');
    assert.strictEqual(quotaRes.status, 200, 'Quota check failed');
    assert(quotaRes.data.postsUsed >= 1, 'Post count not updated');
    assert(quotaRes.data.postsRemaining >= 0, 'Invalid remaining posts');
    console.log(`‚úÖ Quota verified: ${quotaRes.data.postsUsed} posts used, ${quotaRes.data.postsRemaining} remaining`);

    // 5. Check analytics
    console.log('Testing analytics...');
    const analyticsRes = await api.get(`/api/analytics?postId=${postId}`);
    assert.strictEqual(analyticsRes.status, 200, 'Analytics fetch failed');
    assert(analyticsRes.data.postId === postId, 'Analytics post ID mismatch');
    assert(analyticsRes.data.impressions >= 0, 'Invalid impressions data');
    console.log('‚úÖ Analytics verified');

    // 6. Verify brand purpose retrieval
    console.log('Testing brand purpose retrieval...');
    const brandPurposeRes = await api.get('/api/brand-purpose');
    assert.strictEqual(brandPurposeRes.status, 200, 'Brand purpose fetch failed');
    assert.strictEqual(brandPurposeRes.data.userId, TEST_USER_ID, 'Brand purpose user ID mismatch');
    assert(brandPurposeRes.data.corePurpose, 'Core purpose missing');
    console.log('‚úÖ Brand purpose retrieved successfully');

    // 7. Logout
    console.log('Testing logout...');
    const logoutRes = await api.post('/logout');
    assert.strictEqual(logoutRes.status, 200, 'Logout failed');
    console.log('‚úÖ Logout successful');

    console.log('üéâ End-to-end test completed successfully!');
  } catch (error) {
    console.error('‚ùå Test failed:', error.message);
    if (error.response) {
      console.error('Response data:', error.response.data);
      console.error('Status:', error.response.status);
    }
    process.exit(1);
  }
}

runEndToEndTest();