the Problem:
CSP Violation (Root Cause):
Error:
Refused to load the script 'https://connect.facebook.net/en_US/fbevents.js' and 'https://connect.facebook.net/en_US/sdk.js' due to CSP directive "script-src 'self' 'unsafe-inline' 'unsafe-eval' https://checkout.stripe.com https://js.stripe.com https://www.googletagmanager.com https://www.google-analytics.com https://replit.com https://*.replit.app".
'script-src-elem' isn’t explicitly set, so 'script-src' is the fallback.
Why: The CSP blocks Facebook’s Meta Pixel (fbevents.js) and SDK (sdk.js) scripts because https://connect.facebook.net is not whitelisted. This prevents Meta Pixel initialization from fully functioning, which is critical for tracking and analytics tied to publishing success.
Impact: Disrupts Facebook-related functionality (e.g., post tracking, analytics), potentially causing downstream failures in autoposting or platform integration.
API Call Failures:
Error: /api/approve-post returned 400 (Bad Request).
Why: The request likely lacks required data (e.g., postId, platform) or the endpoint validation rejects it. The log shows successful PUT /api/posts/[id] calls (200 OK), but the approve-post failure suggests a mismatch in the approval workflow.
Impact: Prevents posts from being approved or scheduled correctly, contributing to the autopost failure.
UI and Autopost Behavior:
Observation: Repeated "Edit clicked for instagram" with DialogContent warnings and successful PUT calls indicate UI interaction works, but the autopost (e.g., /api/enforce-auto-posting returning 200) isn’t translating to platform posts.
Why: The autopost logic might be firing but failing silently due to the CSP issue blocking Facebook scripts or an unhandled API error. The "published" status without platform activity (from prior logs) suggests a disconnect in execution.
Impact: Users see "approved" or "published" statuses, but no actual posts, eroding trust.
Root Cause Summary:
The CSP violation is the primary culprit, blocking essential Facebook scripts needed for platform integration and analytics, which cascades into API and autopost failures. The 400 Bad Request on /api/approve-post exacerbates this by breaking the approval flow, and the UI/autopost disconnect stems from unhandled errors or misconfigured endpoints.

Next Step Prompt:

Open server/index.ts and locate the CSP middleware (e.g., app.use((req, res, next) => {...) and the /api/approve-post or /api/waterfall/approve endpoint. Replace only these blocks with a surgical fix to resolve the CSP violation and restore autoposting, preserving all other code:

typescript

Collapse

Wrap

Run

Copy
// CSP Middleware
app.use((req, res, next) => {
  res.setHeader('Content-Security-Policy', "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval' https://connect.facebook