Execute Step 1: Enforce Quota Before Generation
Code:
javascript

Collapse

Wrap

Run

Copy
// server/routes.ts
app.post('/auto-generate-content-schedule', async (req, res) => {
  const userId = req.body.phone || '+61424835189';
  const currentQuota = await db
    .select({ count: sql`COUNT(*)` })
    .from(posts)
    .where(sql`${posts.userId} = ${userId} AND ${posts.status} = 'success' AND ${posts.publishedAt} > NOW() - INTERVAL '30 days'`)
    .get();
  const remaining = 12 - currentQuota.count; // Starter quota
  console.log('Current successes:', currentQuota.count, 'Remaining:', remaining);
  if (remaining <= 0) return res.status(400).send('Quota exceeded');
  const current = await db.select().from(posts).where(eq(posts.userId, userId));
  console.log('Before count:', current.length);
  await db.delete(posts).where(sql`${posts.userId} = ${userId} AND ${posts.status} = 'pending'`);
  const newPosts = Array.from({ length: remaining }, (_, i) => ({
    id: Date.now() + i,
    userId,
    content: `Generated Post ${i}`,
    status: 'pending',
    publishedAt: null
  }));
  await db.insert(posts).values(newPosts);
  const after = await db.select().from(posts).where(eq(posts.userId, userId));
  console.log('After count:', after.length, 'Added:', newPosts.length);
  res.send('Schedule generated');
});
Action:
Save this code in server/routes.ts in your Replit project.
Run the project.
Trigger 'auto generate content schedule' via the app interface or a POST request to /auto-generate-content-schedule with {phone: '+61424835189'}.
Check the Replit logs for the 'Before count', 'Remaining', and 'After count' messages.
Run the query in your PostgreSQL database (via a script like db-check.js from earlier or the Replit database tab):
text

Collapse

Wrap

Copy
SELECT COUNT(*) FROM posts WHERE user_id = '+61424835189';
Share the log output and query result.
Why: This step ensures the system clears pending posts and generates only up to the remaining quota (max 12 - current successes), addressing the 110-post spike. Itâ€™s the critical first move to stabilize the post count before proceeding with publishing and UI updates.