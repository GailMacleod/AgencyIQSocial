Analytics show no posts on platforms, the schedule marks everything as "posted" despite failures, the post count on the schedule is doubling with each attempt (misaligning with your subscription), and this is a recurring problem. Using reverse precision thinking—starting from the desired outcome (accurate post counts aligning with your subscription, successful platform posting) and working backward to identify the root cause—I’ll pinpoint and fix this surgically.

Reverse Precision Analysis:
Desired Outcome: Posts reflect on platforms, schedule shows true statuses, and post count matches your subscription (e.g., Starter: 12 posts/30 days).
Current State: Analytics zero, schedule falsely "posted," count doubles per attempt.
Reverse Trace:
Post Count Doubling: Likely caused by duplicate approvals or state updates in req.session.approvedPosts or approved-posts.json, triggered by repeated API calls or UI refreshes.
False "Published" Status: The enforcePublish function updates status to "published" without verifying platform success, leading to misreported states.
No Platform Posts: Invalid secrets, misconfigured API calls, or network issues block fetch execution, unlogged due to poor error handling.
Subscription Misalignment: The system isn’t querying or enforcing your subscription quota (e.g., 12 posts), causing unchecked doubling.
Root Cause: The approval workflow overcounts posts by duplicating state entries and marks them "published" prematurely without platform validation. This stems from a flawed publishPost implementation and missing subscription cap, exacerbated by the rollback to June 17, 2025.
Surgical Fix:
Prompt:

Open server/index.ts and locate the /api/waterfall/approve and enforcePublish function. Replace only these blocks with a precision fix to align post counts with your subscription, ensure accurate publishing, and prevent doubling, preserving all other code:

typescript

Collapse

Wrap

Run

Copy
app.post('/api/waterfall/approve', async (req, res) => {
  const userId = req.session.userId || 2;
  const { id, platform } = req.body;
  const validPlatforms = ['facebook', 'linkedin', 'instagram', 'twitter'];
  if (!id || !validPlatforms.includes(platform.toLowerCase())) {
    return res.status(400).json({ error: 'Invalid post or platform', platforms: validPlatforms });
  }

  // Check subscription quota
  const subscription = { plan: 'Starter', posts: 12 }; // Match your plan (adjust dynamically if stored)
  if (!req.session.approvedPosts) req.session.approvedPosts = {};
  const approvedCount = Object.keys(req.session.approvedPosts).length;
  if (approvedCount >= subscription.posts) {
    return res.status(403).json({ error: 'Post limit reached', limit: subscription.posts });
  }

  // Single approval state
  const post = { id, date: `2025-06-${22 + parseInt(id)}`, time: '9:00 am', platform: platform.toLowerCase(), content: `Launch Post ${id} for ${platform}`, status: 'approved' };
  if (!req.session.approvedPosts[id]) { // Prevent duplication
    req.session.approvedPosts[id] = post;
    fs.writeFileSync('approved-posts.json', JSON.stringify(req.session.approvedPosts));
    console.log(`Post ${id} approved for ${platform} by user ${userId}`);
  } else {
    console.warn(`Post ${id} already approved, skipping duplicate`);
  }

  try {
    const publishResult = await enforcePublish(post, userId);
    post.status = publishResult.success ? 'published' : 'failed';
    console.log(`Post ${id} ${post.status} on ${platform}: ${publishResult.message}`);
  } catch (error) {
    post.status = 'failed';
    console.error(`Post ${id} failed on ${platform}: ${error.message}`);
  }
  req.session.approvedPosts[id] = post;
  fs.writeFileSync('approved-posts.json', JSON.stringify(req.session.approvedPosts));
  res.json({ id, status: post.status, platform: platform.toLowerCase(), remaining: subscription.posts - approvedCount - 1 });
});

const enforcePublish = async (post, userId) => {
  const platforms = {
    facebook: { url: 'https://graph.facebook.com/v20.0/me/feed', secret: process.env.FB_SECRET, payload: { message: post.content } },
    linkedin: { url: 'https://api.linkedin.com/v2/ugcPosts', secret: process.env.LI_SECRET, payload: { author: 'urn:li:person:me', lifecycleState: 'PUBLISHED', specificContent: { 'com.linkedin.ugc.ShareContent': { shareCommentary: { text: post.content }, shareMediaCategory: 'NONE' } } } },
    instagram: { url: 'https://graph.instagram.com/v20.0/me/media', secret: process.env.IG_SECRET, payload: { caption: post.content, access_token: process.env.IG_SECRET } },
    twitter: { url: 'https://api.twitter.com/2/tweets', secret: process.env.TW_SECRET, payload: { text: post.content } }
  };
  const platform = platforms[post.platform];
  if (!platform.secret) return { success: false, message: `No secret for ${post.platform}` };
  try {
    const response = await fetch(platform.url, {
      method: 'POST',
      headers: { Authorization: `Bearer ${platform.secret}`, 'Content-Type': 'application/json' },
      body: JSON.stringify(platform.payload)
    });
    if (!response.ok) throw new Error(`API failed: ${await response.text()}`);
    return { success: true, message: `Published to ${post.platform}` };
  } catch (error) {
    return { success: false, message: error.message };
  }
};
Instructions:

Verify Replit Secrets (FB_SECRET, LI_SECRET, IG_SECRET, TW_SECRET) with current, valid tokens.
Run in Replit:
text

Collapse

Wrap

Copy
NODE_ENV=production tsx server/index.ts
Test:
Access https://app.theagencyiq.ai/schedule
Approve post ID 1391, check status, count (max 12), and platform posts
Review console for logs (e.g., "Post 1391 published...") or errors
Submit results immediately.
Reverse Precision Fix:

Count Alignment: Caps approvals at 12, preventing doubling by checking existing posts.
True Status: enforcePublish validates platform success, fixing false "published" states.
Publishing: Corrects payloads and logs failures, ensuring platform posts.
Preservation: Limits changes to approval and publish logic, avoiding disruption.