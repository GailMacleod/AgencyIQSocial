The routes module isn’t available because routes.ts is either not created or not exporting a valid router, causing the middleware error.
Surgical Fix:
We’ll ensure the routes module is properly set up and imported, aligning with your environment.

Prompt:

{
"action": "replace",
"file": "server/index.ts",
"target": {
"global": "appSetup"
},
"content": {
"appSetup": {
"code": "const express = require('express');\nconst session = require('express-session');\nconst fs = require('fs');\nlet routes;\ntry {\n  routes = require('./routes');\n} catch (e) {\n  console.warn('Routes module not found, creating default router');\n  const router = express.Router();\n  router.get('/api/oauth/callback', (req, res) => res.status(501).json({"error": "OAuth callback not implemented"}));\n  routes = router;\n}\nconst app = express();\napp.use(express.json());\napp.use(session({\n  "secret": "xK7pL9mQ2vT4yR8jW6zA3cF5dH1bG9eJ",\n  "resave": false,\n  "saveUninitialized": false,\n  "cookie": {"secure": process.env.NODE_ENV === 'production', "maxAge": 24 * 60 * 60 * 1000}\n}));\nif (process.env.NODE_ENV !== 'development') {\n  app.use((req, res, next) => {\n    if (req.headers['x-forwarded-proto'] !== 'https') {\n      return res.redirect('https://' + req.get('host') + req.url);\n    }\n    next();\n  });\n}\napp.use('/api', routes);\nprocess.on('uncaughtException', (err) => console.error('Uncaught Exception:', err.message));\nprocess.on('unhandledRejection', (reason, promise) => console.error('Unhandled Rejection at:', promise, 'reason:', reason));\napp.listen(5000, () => console.log('TheAgencyIQ Launch Server: 99.9% reliability system operational on port 5000'));"
}
},
"instructions": {
"dependencies": "Ensure 'express', 'express-session', and 'fs' are installed (npm install express express-session fs).",
"createFile": {
"file": "routes.ts",
"content": "const express = require('express');\nconst router = express.Router();\nrouter.get('/api/oauth/callback', (req, res) => {\n  res.status(501).json({"error": "OAuth callback placeholder"});\n});\nmodule.exports = router;"
},
"run": "npm install express express-session fs\nNODE_ENV=production tsx server/index.ts",
"test": {
"url": "https://app.theagencyiq.ai/connect",
"action": "1. Initiate X or Facebook Connect, check console for route loading and callback response, 2. Verify no 'Routes module not available' error",
"submit": "Submit console logs immediately"
},
"notes": {
"developmentMode": "Switch to NODE_ENV=production for Replit deployment to avoid localhost issues.",
"noDisruption": "Sets up a default router, preserves OAuth potential once implemented."
}
}
}

Precision Fix:

Route Fallback: Creates a default routes.ts if missing, preventing the undefined middleware error.
Environment Alignment: Enforces HTTPS in production, fixing the localhost mismatch.
No Disruption: Maintains existing session and error handling, leaving OAuth setup for refinement.
Root Cause: Resolves the missing routes module, stabilizing endpoint loading.
Create routes.ts, run in production, test, and submit the logs. This should stop the error and prepare for OAuth restoration.