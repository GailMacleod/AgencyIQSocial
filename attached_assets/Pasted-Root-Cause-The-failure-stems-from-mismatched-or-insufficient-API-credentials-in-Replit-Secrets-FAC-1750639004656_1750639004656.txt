Root Cause:
The failure stems from mismatched or insufficient API credentials in Replit Secrets (FACEBOOK_USER_ACCESS_TOKEN, etc.) not aligning with platform-specific requirements (e.g., page token for Facebook), combined with the code not validating or adapting to these credentials properly. The rollback and subsequent changes reintroduced this instability.

Prompt to Fix:
Open server/index.ts and locate the enforcePublish function. Replace only this block with a precision fix to use your valid Replit Secrets credentials, ensure successful publishing across all platforms, and preserve all other code:

typescript

Collapse

Wrap

Run

Copy
const enforcePublish = async (post, userId) => {
  const platforms = {
    facebook: { url: 'https://graph.facebook.com/v20.0/{page-id}/feed', secret: process.env.FACEBOOK_PAGE_ACCESS_TOKEN, payload: { message: post.content, access_token: process.env.FACEBOOK_PAGE_ACCESS_TOKEN } }, // Replace {page-id} with your page ID
    linkedin: { url: 'https://api.linkedin.com/v2/ugcPosts', secret: process.env.LINKEDIN_USER_ACCESS_TOKEN, payload: { author: 'urn:li:person:me', lifecycleState: 'PUBLISHED', specificContent: { 'com.linkedin.ugc.ShareContent': { shareCommentary: { text: post.content }, shareMediaCategory: 'NONE' } } } },
    instagram: { url: 'https://graph.instagram.com/v20.0/me/media', secret: process.env.INSTAGRAM_USER_ACCESS_TOKEN, payload: { caption: post.content, access_token: process.env.INSTAGRAM_USER_ACCESS_TOKEN } },
    twitter: { url: 'https://api.twitter.com/2/tweets', secret: process.env.TWITTER_USER_ACCESS_TOKEN, payload: { text: post.content } }
  };
  const platform = platforms[post.platform.toLowerCase()];
  if (!platform.secret) return { success: false, message: `No credential for ${post.platform}` };

  try {
    const response = await fetch(platform.url.replace('{page-id}', process.env.FACEBOOK_PAGE_ID || 'me'), {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(platform.payload)
    });
    const result = await response.json();
    if (!response.ok) {
      const errorMsg = `API ${response.status}: ${result.error?.message || await response.text()}`;
      console.error(`Publish failed for ${post.platform} [${userId}]: ${errorMsg}`);
      return { success: false, message: errorMsg };
    }
    console.log(`Publish succeeded for ${post.platform} [${userId}]: Post ID ${result.id}`);
    return { success: true, message: `Published with ID ${result.id}` };
  } catch (error) {
    return { success: false, message: error.message };
  }
};