Deploy TheAgencyIQ with Seedance 1.0 and three subscriptions. Open server/index.ts, set up Express with const express = require('express'); const app = express(); app.use(express.json()); app.use(express.static('public'));, add OAuth with const { OAuth2Client } = require('google-auth-library'); const client = new OAuth2Client('YOUR_GOOGLE_CLIENT_ID'); app.get('/auth/google', (req, res) => { const url = client.generateAuthUrl({ scope: ['profile', 'email'] }); res.redirect(url); }); app.get('/auth/google/callback', async (req, res) => { const { code } = req.query; const { tokens } = await client.getToken(code); req.session = { user: tokens.id_token, subscription: 'pro' }; res.redirect('/'); }); app.use((req, res, next) => { if (!req.session?.user) return res.redirect('/auth/google'); next(); });, restart with Restarted Start application. Open server/routes.ts, add /api/posts/:id/generate-video with const axios = require('axios'); const semaphore = require('semaphore')(2); app.post('/api/posts/:id/generate-video', (req, res) => { if (req.session.videoAttempts?.[req.params.id] >= 2) return res.status(400).send('Max attempts reached'); semaphore.take(() => { const { prompt } = req.body; axios.post('https://api.wavespeed.ai/v1/generate', { prompt, duration: 30, resolution: '720p' }, { headers: { 'Authorization': 'Bearer YOUR_SEEDANCE_API_KEY' } }).then(response => { req.session.videoAttempts = req.session.videoAttempts || {}; req.session.videoAttempts[req.params.id] = (req.session.videoAttempts[req.params.id] || 0) + 1; res.json({ videoUrl: response.data.videoUrl }); }).catch(err => res.status(500).send(Error: ${err.message})).finally(() => semaphore.leave()); }); }), and add /api/posts/:id/preview-video to return res.json({ videoUrl: req.session.videoUrls?.[req.params.id] || '' }). Open client/src/pages/intelligent-schedule.tsx, preserve the card popup, ensure the ‘Generate Video’ button triggers handleGenerateVideo with a loading indicator (<div className="loading">Generating...</div>), show two prompts (e.g., ‘Queensland Growth: Visual drip, 30s’ and ‘Coastal Ease: Visual breeze, 30s’) for one choice, preview with <video controls src={videoUrl} />, and ‘Approve’ updates the post. Open server/auto-posting-enforcer.ts, ensure it publishes posts up to subscription quota (26, 52, 78) with optional videos across platforms. Ensure server/PostQuotaService.ts enforces a 30-day cycle per tier. In test/, run npx tsx test-comprehensive-quota-fix.js for 6/6 pass, testing subscriptions and video. In deploy.sh, set to ./build-production.sh && node server/index.js with curl http://localhost:5000/api/health pre-check and posts visible. Add .env with GOOGLE_CLIENT_ID=your_id GOOGLE_CLIENT_SECRET=your_secret SEEDANCE_API_KEY=your_key, and install npm install google-auth-library axios semaphore. Document the Seedance integration, OAuth, subscription tiers, and test results in replit.md. Redeploy with ./deploy.sh after 6/6 pass, and manually verify posts per subscription with videos on platforms. Replace placeholders with valid keys from Google Cloud and Wavespeed.ai.