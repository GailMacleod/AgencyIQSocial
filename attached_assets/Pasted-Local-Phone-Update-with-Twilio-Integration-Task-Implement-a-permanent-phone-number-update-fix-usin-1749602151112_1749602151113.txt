Local Phone Update with Twilio Integration

Task: Implement a permanent phone number update fix using Twilio for SMS verification in a local Node.js environment. Update server/index.ts, client/src/components/BrandPurpose.jsx, and client/src/api.ts. Export data from Replit for local use, preserving all functionality (Brand Purpose, quota system, OAuth, Google Analytics).

Requirements:





Local Server Setup with Twilio:





Install dependencies: npm install pg twilio.



In server/index.ts, configure Twilio:





const twilio = require('twilio')('YOUR_ACCOUNT_SID', 'YOUR_AUTH_TOKEN'); (replace with your Twilio credentials).



Use PostgreSQL: const pool = new Pool({ user: 'your_user', host: 'localhost', database: 'agencyiq', password: 'your_password', port: 5432 });.



Define /api/update-phone:





res.set('Content-Type', 'application/json');



Log 'Starting phone update for [req.body.email]'.



Validate session with live OAuth, log 'Session validated' or 'Session invalid'.



Send SMS verification code: await twilio.messages.create({ body: 'Verification code: 123456', from: 'YOUR_TWILIO_NUMBER', to: req.body.newPhone });, log 'SMS sent to [new_phone]'.



Verify code: if (req.body.verificationCode !== '123456') throw new Error('Invalid code');, log 'SMS verified'.



Update users: await pool.query('UPDATE users SET user_id = $1 WHERE email = $2', [req.body.newPhone, req.body.email]);



Migrate post_ledger and post_schedule: await pool.query('UPDATE post_ledger SET user_id = $1 WHERE user_id = $2', [req.body.newPhone, '+61434567890']); await pool.query('UPDATE post_schedule SET user_id = $1 WHERE user_id = $2', [req.body.newPhone, '+61434567890']);



Log 'Data migrated'.



Return { success: true, newPhone: [req.body.newPhone] } with status 200.



In try-catch: log 'Phone update error: [error.stack]', return { error: [error.message] } with status 400.



Export data: Add /api/export-data to return { users, post_ledger, post_schedule } as JSON, logging 'Data exported'.



Client Integration:





In client/src/components/BrandPurpose.jsx, update the phone modal:





Send { email, newPhone, verificationCode } to /api/update-phone after SMS input.



Log 'Phone update sent for [email]: [newPhone]'.



Show error: 'Update failed: [details]' if JSON error.



Client API Fix:





In client/src/api.ts, update apiRequest:





if (!response.ok) { const text = await response.text(); console.error('Error:', text); throw new Error('Server error: ' + text.substring(0, 50)); }



Return response.json().



Log 'API call to [url] returned [status]'.



Preserve Functionality:





Ensure /api/brand-posts, /api/approve-post, and /api/quota-status work with the new database.



Test with existing curls (e.g., curl -X GET "http://localhost:5000/api/quota-status").



Testing:





Set up PostgreSQL locally (createdb agencyiq).



Run SQL schema from prior response.



Start server: node server/index.ts and client: npm start.



Test with curl -X POST "http://localhost:5000/api/update-phone" -H "Content-Type: application/json" -d '{"email": "gailm@macleodglba.com.au", "newPhone": "+610424835189", "verificationCode": "123456"}'.



Export data with curl -X GET "http://localhost:5000/api/export-data" --cookie cookies.txt.



Safeguards:





Preserve posted posts and quota.



Use live OAuth