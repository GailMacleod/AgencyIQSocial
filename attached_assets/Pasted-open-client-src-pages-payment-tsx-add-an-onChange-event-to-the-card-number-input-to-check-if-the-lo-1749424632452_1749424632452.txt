open client/src/pages/payment.tsx, add an onChange event to the card number input to check if the logged-in user’s email is 'testuser@agencyiq.com' and the card number is '4242424242424242'. If true, set a state variable 'isTestSubscription' to true, log 'Test subscription initiated for testuser@agencyiq.com with 4242424242424242 using password TestPass123!"', and make a mock PUT request to /api/user/subscription with { subscriptions: { starter: true, growth: true, professional: true }, postLimit: 45, isTest: true } using the user’s ID from the auth state. On form submission, if 'isTestSubscription' is true, log 'Test subscription successful for testuser@agencyiq.com', prevent Stripe submission by returning false, and update the UI to reflect a successful purchase. If false, proceed with Stripe and log 'Live payment attempted with password TestPass123!"'. Commit with message 'reset-mock-payment-first-principles' without deploying. Ensure no unauthorized changes beyond this addition."
Instructions:
Open client/src/pages/payment.tsx in Replit (ensure it exists or create it with your payment form).
Apply the prompt as written.
Add an onChange event to the card input (e.g., <input type="text" onChange={(e) => { const cardNumber = e.target.value.replace(/\D/g, ''); if (currentUser.email === 'testuser@agencyiq.com' && cardNumber === '4242424242424242') { setIsTestSubscription(true); console.log('Test subscription initiated for testuser@agencyiq.com with 4242424242424242 using password TestPass123!"'); fetch('/api/user/subscription', { method: 'PUT', credentials: 'include', body: JSON.stringify({ subscriptions: { starter: true, growth: true, professional: true }, postLimit: 45, isTest: true }), headers: { 'Content-Type': 'application/json' } }); } }} />), using setIsTestSubscription from a state hook (e.g., const [isTestSubscription, setIsTestSubscription] = useState(false);).
On form submission (e.g., <form onSubmit={(e) => { e.preventDefault(); if (isTestSubscription) { console.log('Test subscription successful for testuser@agencyiq.com'); e.target.reset(); return false; } // Stripe logic }}>), check isTestSubscription, log success, reset the form, and return false to stop Stripe.
If false, log console.log('Live payment attempted with password TestPass123!"'); and proceed with Stripe.
Ensure the UI updates (e.g., show a success message) for the test case.
Save the file.
Go to the Git tab, commit with "reset-mock-payment-first-principles" (do not deploy).
Visit https://agency-iq-social-GailMac.replit.app/payment (or navigate via the app), log in as Username: testuser@agencyiq.com and Password: TestPass123!", enter 4242424242424242 with any future date and CVC (e.g., 12/30, 123), submit, check console for the logs and verify 45-post access at 09:18 AM AEST.
Report the outcome (e.g., mock logs present, no decline error, subscriptions active) and any issues.
Validation:
If the decline error persists, ensure the onSubmit return false is in the correct event handler and precedes Stripe’s call (e.g., move it before stripe.confirmCardPayment).
If subscriptions don’t update, verify the PUT call uses the correct user ID and the endpoint handles isTest.
If live users are affected, confirm the email and card check is strict in onChange.
Confirm, report Replit overreach.