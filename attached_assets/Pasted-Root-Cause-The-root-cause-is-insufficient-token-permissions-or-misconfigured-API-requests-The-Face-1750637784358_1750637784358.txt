Root Cause:
The root cause is insufficient token permissions or misconfigured API requests. The Facebook API activity shows attempts are made, but failures (e.g., 403 Forbidden due to missing pages_manage_posts or 400 Bad Request due to payload errors) arenâ€™t properly logged or handled, leading to false "published" statuses. The CSP violation compounds this by blocking tracking, but the core issue is in enforcePublish.

Prompt to Fix:
Open server/index.ts and locate the enforcePublish function. Replace only this block with a precision fix to ensure successful Facebook API posting based on the activity log, preserving all other code:

typescript

Collapse

Wrap

Run

Copy
const enforcePublish = async (post, userId) => {
  const platforms = {
    facebook: { url: 'https://graph.facebook.com/v20.0/me/feed', secret: process.env.FB_SECRET, payload: { message: post.content, access_token: process.env.FB_SECRET } }, // Explicit token in payload
    linkedin: { url: 'https://api.linkedin.com/v2/ugcPosts', secret: process.env.LI_SECRET, payload: { author: 'urn:li:person:me', lifecycleState: 'PUBLISHED', specificContent: { 'com.linkedin.ugc.ShareContent': { shareCommentary: { text: post.content }, shareMediaCategory: 'NONE' } } } },
    instagram: { url: 'https://graph.instagram.com/v20.0/me/media', secret: process.env.IG_SECRET, payload: { caption: post.content, access_token: process.env.IG_SECRET } },
    twitter: { url: 'https://api.twitter.com/2/tweets', secret: process.env.TW_SECRET, payload: { text: post.content } }
  };
  const platform = platforms[post.platform];
  if (!platform.secret) return { success: false, message: `No secret for ${post.platform}` };

  let token = platform.secret;
  try {
    // Validate Facebook API response
    const response = await fetch(platform.url, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' }, // Remove Authorization header, use payload token
      body: JSON.stringify(platform.payload)
    });
    const result = await response.json();
    if (!response.ok) {
      const errorMsg = `API error ${response.status}: ${result.error?.message || await response.text()}`;
      console.error(`Publish failed for ${post.platform} [${userId}]: ${errorMsg}`);
      throw new Error(errorMsg);
    }
    console.log(`Publish succeeded for ${post.platform} [${userId}]: Post ID ${result.id}`);
    return { success: true, message: `Published with ID ${result.id}` };
  } catch (error) {
    return { success: false, message: error.message };
  }
};