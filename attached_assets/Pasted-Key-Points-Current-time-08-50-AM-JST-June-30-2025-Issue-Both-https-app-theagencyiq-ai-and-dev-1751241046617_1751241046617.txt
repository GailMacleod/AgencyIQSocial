Key Points
Current time: 08:50 AM JST, June 30, 2025.
Issue: Both https://app.theagencyiq.ai and dev (https://4fc77172-459a-4da7-8c33-5014abb1b73e-00-dqhtnud4ismj.worf.replit.dev/) now return a 500 Internal Server Error, with the error log: {"error":"Failed to load app","details":"ENOENT: no such file or directory, stat '/home/runner/workspace/server/dist/public/index.html'"}. This indicates the index.html file is missing in the dist/public/ directory.
Context: Recent deployment (June 29, 11:04 AM JST) built successfully, but the 500 persists. Updates to passport and other dependencies were attempted, but the file path issue has emerged.
What I’m Doing Now
Targeting the ENOENT Error: The ENOENT (Error NO ENTry) means dist/public/index.html isn’t found during runtime, causing the 500 crash on both environments. I’ll fix the build process to ensure the file is generated.
No OAuth Disruption: Keeping /facebook and OAuth logic intact, focusing on the file-serving issue.
Surgical Fix: Adjusting the build configuration and server path to restore index.html without overhauling the app.
Replit-to-Production Fix
Diagnose the Missing index.html
The error shows /home/runner/workspace/server/dist/public/index.html isn’t found. This could be due to a Vite build misconfiguration or a file not being copied correctly.
Check the dist/public/ directory post-build: Run ls -la dist/public/ in the Replit shell to confirm index.html is missing.
Recent npm audit fix --force might have altered dependencies (e.g., esbuild, drizzle-kit) affecting the build.
Fix Build Configuration
Ensure Vite includes index.html in the build. Check or update vite.config.ts (create if missing):
javascript

Collapse

Wrap

Run

Copy
import { defineConfig } from 'vite';

export default defineConfig({
  build: {
    outDir: 'dist/public', // Match server path
    rollupOptions: {
      input: 'index.html', // Ensure index.html is the entry point
    },
  },
});
Install Vite if needed: npm install vite --save-dev.
Rebuild: npm run build.
Update server/index.ts for Robust Path Handling
Adjust to handle the file path dynamically:
javascript

Collapse

Wrap

Run

Copy
const express = require('express');
const bodyParser = require('body-parser');
const path = require('path');
const app = express();
const baseUrl = process.env.NODE_ENV === 'production'
  ? 'https://app.theagencyiq.ai'
  : 'https://4fc77172-459a-4da7-8c33-5014abb1b73e-00-dqhtnud4ismj.worf.replit.dev';

app.use(bodyParser.urlencoded({ extended: true }));
app.use(bodyParser.json());
app.use((req, res, next) => {
  res.set({
    'Access-Control-Allow-Origin': '*',
    'Content-Security-Policy': "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval' https://app.theagencyiq.ai https://4fc77172-459a-4da7-8c33-5014abb1b73e-00-dqhtnud4ismj.worf.replit.dev https://replit.com; connect-src 'self' https://graph.facebook.com;"
  });
  next();
});

app.all('/facebook', (req, res) => {
  try {
    const { code, signed_request, error } = { ...req.body, ...req.query };
    if (code) {
      res.status(200).json({
        message: 'Login successful',
        redirect: `${baseUrl}/platform-connections?code=${encodeURIComponent(code)}`
      });
    } else if (signed_request) {
      res.status(200).json({
        url: `${baseUrl}/deletion-status',
        confirmation_code: 'del_' + Math.random().toString(36).substr(2, 9)
      });
    } else if (error) {
      throw new Error(`Facebook error: ${error}`);
    } else {
      throw new Error('Invalid request');
    }
  } catch (error) {
    console.error('Facebook Error:', error.stack);
    res.status(500).json({ error: 'Server issue', details: error.message });
  }
});

app.get('/platform-connections', (req, res) => {
  try {
    const { code, error } = req.query;
    if (!code && !error) {
      return res.status(400).json({ error: 'Missing code or error parameter' });
    }
    if (error) {
      return res.status(400).json({ error: 'Login failed', message: error });
    }
    res.status(200).json({ message: 'Platform connected', code });
  } catch (error) {
    console.error('Platform Error:', error.stack);
    res.status(500).json({ error: 'Server issue', details: error.message });
  }
});

const publicDir = path.join(__dirname, '..', 'dist', 'public'); // Adjust path to match build output
app.use(express.static(publicDir));
app.get('/manifest.json', (req, res) => {
  res.set('Content-Security-Policy', "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval';");
  res.sendFile(path.join(publicDir, 'manifest.json'), (err) => {
    if (err) res.status(404).json({ error: 'Manifest missing' });
  });
});
app.get('/public/js/beacon.js', (req, res) => {
  res.sendFile(path.join(publicDir, 'js', 'beacon.js'), (err) => err && res.status(404).json({ error: 'Beacon missing' }));
});
app.get('/replit-proxy/beacon.js', (req, res) => {
  res.redirect(301, '/public/js/beacon.js');
});
app.get('*', (req, res) => {
  res.sendFile(path.join(publicDir, 'index.html'), (err) => {
    if (err) {
      console.error('Index.html Error:', err.stack);
      res.status(500).json({ error: 'Failed to load app', details: err.message });
    }
  });
});

process.on('uncaughtException', (error) => console.error('Uncaught:', error.stack));

const PORT = process.env.PORT || 5000;
app.listen(PORT, () => console.log(`Live on ${PORT}`));
Install if needed: npm install express body-parser vite --save-dev.