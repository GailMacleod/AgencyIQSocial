 Identify the master user data location, correct the post count discrepancy (104 vs. 52 for gailm@macleodglba.com.au with UID +610424835189), and prepare for deployment. Update server/index.ts, client/src/components/BrandPurpose.jsx, and client/src/api.ts. Preserve all functionality (Brand Purpose, quota system, OAuth, Google Analytics, webhooks).

Requirements:





Master Data Location:





In server/index.ts, add a diagnostic endpoint:





app.get('/api/master-data', (req, res) => {





res.set('Content-Type', 'application/json');



if (req.headers.authorization !== 'Bearer YOUR_ADMIN_TOKEN') {





console.log('Master data access denied for [req.ip]');



return res.status(403).json({ error: 'Unauthorized' });



}



try {





const users = await pool.query('SELECT user_id, email, subscription_plan, subscription_start FROM users WHERE user_id = $1', ['+610424835189']);



const ledger = await pool.query('SELECT user_id, period_start, quota, used_posts FROM post_ledger WHERE user_id = $1', ['+610424835189']);



const schedule = await pool.query('SELECT user_id, post_id, status, is_counted, scheduled_at FROM post_schedule WHERE user_id = $1', ['+610424835189']);



console.log('Master data fetched for +610424835189:', { users: users.rows, ledger: ledger.rows, schedule: schedule.rows.length });



res.json({ users: users.rows, ledger: ledger.rows, postCount: schedule.rows.length });



} catch (err) {





console.error('Master data error:', err.stack);



res.status(500).json({ error: err.message });



}



});



Test with curl -X GET "http://localhost:5000/api/master-data" -H "Authorization: Bearer YOUR_ADMIN_TOKEN".



Fix Post Count Discrepancy:





Update /api/generate-schedule:





app.post('/api/generate-schedule', async (req, res) => {





res.set('Content-Type', 'application/json');



try {





const userId = req.session?.user?.user_id || '+610424835189';



const plan = (await pool.query('SELECT subscription_plan FROM users WHERE user_id = $1', [userId])).rows[0].subscription_plan;



const quota = plan === 'professional' ? 52 : plan === 'growth' ? 27 : 12;



const currentPosts = await pool.query('SELECT COUNT(*) as count FROM post_schedule WHERE user_id = $1 AND is_counted = true', [userId]);



if (currentPosts.rows[0].count >= quota) throw new Error('Quota exceeded');