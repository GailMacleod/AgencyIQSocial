Prompt to Fix:
Open server/index.ts and locate the enforcePublish function and any username/password login endpoint (e.g., /api/login or similar). Replace only these blocks with a fix to use user-provided credentials, generate valid platform tokens, and ensure successful publishing, preserving all other code:

typescript

Collapse

Wrap

Run

Copy
// User Login Endpoint (add or replace if exists)
app.post('/api/login', async (req, res) => {
  const { username, password, platform } = req.body;
  const validPlatforms = ['facebook', 'linkedin', 'instagram', 'twitter'];
  if (!username || !password || !validPlatforms.includes(platform.toLowerCase())) {
    return res.status(400).json({ error: 'Invalid login data' });
  }

  try {
    const token = await generatePlatformToken(username, password, platform);
    if (!token) throw new Error('Authentication failed');
    if (!req.session.userTokens) req.session.userTokens = {};
    req.session.userTokens[platform.toLowerCase()] = token;
    fs.writeFileSync('user-tokens.json', JSON.stringify(req.session.userTokens));
    console.log(`Login succeeded for ${platform} with user ${username}`);
    res.json({ success: true, token });
  } catch (error) {
    console.error(`Login failed for ${platform}: ${error.message}`);
    res.status(401).json({ error: error.message });
  }
});

const generatePlatformToken = async (username, password, platform) => {
  // Placeholder: Implement platform-specific OAuth flow
  const credentials = { facebook: { clientId: process.env.FACEBOOK_APP_ID, clientSecret: process.env.FACEBOOK_APP_SECRET }, linkedin: { clientId: process.env.LINKEDIN_CLIENT_ID, clientSecret: process.env.LINKEDIN_CLIENT_SECRET } /* Add others */ };
  if (platform.toLowerCase() === 'facebook') {
    const response = await fetch('https://graph.facebook.com/oauth/access_token', {
      method: 'POST',
      headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
      body: `grant_type=password&username=${encodeURIComponent(username)}&password=${encodeURIComponent(password)}&client_id=${credentials.facebook.clientId}&client_secret=${credentials.facebook.clientSecret}`
    });
    const data = await response.json();
    return data.access_token;
  }
  // Add LinkedIn, Instagram, Twitter logic similarly
  return null;
};

// Enforce Publish Function
const enforcePublish = async (post, userId) => {
  const platforms = {
    facebook: { url: 'https://graph.facebook.com/v20.0/me/feed', secretKey: 'facebook', payload: { message: post.content, access_token: req.session.userTokens?.facebook } },
    linkedin: { url: 'https://api.linkedin.com/v2/ugcPosts', secretKey: 'linkedin', payload: { author: 'urn:li:person:me', lifecycleState: 'PUBLISHED', specificContent: { 'com.linkedin.ugc.ShareContent': { shareCommentary: { text: post.content }, shareMediaCategory: 'NONE' } }, access_token: req.session.userTokens?.linkedin } },
    instagram: { url: 'https://graph.instagram.com/v20.0/me/media', secretKey: 'instagram', payload: { caption: post.content, access_token: req.session.userTokens?.instagram } },
    twitter: { url: 'https://api.twitter.com/2/tweets', secretKey: 'twitter', payload: { text: post.content, access_token: req.session.userTokens?.twitter } }
  };
  const platform = platforms[post.platform.toLowerCase()];
  const token = req.session.userTokens?.[platform.secretKey];
  if (!token) return { success: false, message: `No token for ${post.platform}, login required` };

  try {
    const appSecret = process.env[platform.secretKey.toUpperCase() + '_APP_SECRET'] || '';
    const appSecretProof = appSecret ? crypto.createHmac('sha256', appSecret).update(token).digest('hex') : '';
    const response = await fetch(platform.url, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ ...platform.payload, appsecret_proof: appSecretProof })
    });
    const result = await response.json();
    if (!response.ok) {
      const errorMsg = `API ${response.status}: ${result.error?.message || await response.text()}`;
      console.error(`Publish failed for ${post.platform} [${userId}]: ${errorMsg}`);
      return { success: false, message: errorMsg };
    }
    console.log(`Publish succeeded for ${post.platform} [${userId}]: Post ID ${result.id}`);
    return { success: true, message: `Published with ID ${result.id}` };
  } catch (error) {
    return { success: false, message: error.message };
  }
};
Instructions:

Ensure Replit Secrets include FACEBOOK_APP_ID, FACEBOOK_APP_SECRET, LINKEDIN_CLIENT_ID, LINKEDIN_CLIENT_SECRET, etc., for token generation.
Run in Replit:
text

Collapse

Wrap

Copy
npm install express
NODE_ENV=production tsx server/index.ts