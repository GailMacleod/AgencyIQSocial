 Implement a database requirement to keep master user data up to date for all customers, synchronizing users, post_ledger, and post_schedule per user_id, and populate app functions (e.g., schedule, profile) according to each customer’s details. Update server/index.ts, client/src/components/BrandPurpose.jsx, and client/src/api.ts. Preserve all functionality (Brand Purpose, quota system, OAuth, Google Analytics, webhooks).

Requirements:





Database Synchronization Endpoint:





In server/index.ts, add a global sync endpoint:





app.post('/api/sync-all-user-data', (req, res) => {





res.set('Content-Type', 'application/json');



if (req.headers.authorization !== 'Bearer YOUR_ADMIN_TOKEN') {





console.log('Sync access denied for [req.ip]');



return res.status(403).json({ error: 'Unauthorized' });



}



try {





const users = await pool.query('SELECT user_id, subscription_plan FROM users');



for (const user of users.rows) {





const userId = user.user_id;



const quota = user.subscription_plan === 'professional' ? 52 : user.subscription_plan === 'growth' ? 27 : 12;



const currentPosts = await pool.query('SELECT COUNT(*) as count FROM post_schedule WHERE user_id = $1', [userId]);



const postedCount = await pool.query('SELECT COUNT(*) as count FROM post_schedule WHERE user_id = $1 AND status = $2 AND is_counted = $3', [userId, 'posted', true]);



if (currentPosts.rows[0].count !== quota) {





const diff = quota - currentPosts.rows[0].count;



if (diff > 0) {





for (let i = 0; i < diff; i++) {





await pool.query('INSERT INTO post_schedule (user_id, content, platform, status, scheduled_at) VALUES ($1, $2, $3, $4, $5)', [userId, 'Synced post ' + i, 'facebook', 'draft', new Date()]);



}



console.log('Added', diff, 'posts for', userId);



} else if (diff < 0) {





const excess = -diff;



await pool.query('DELETE FROM post_schedule WHERE user_id = $1 AND status = $2 LIMIT $3', [userId, 'draft', excess]);



console.log('Removed', excess, 'excess posts for', userId);



}



}



await pool.query('UPDATE post_ledger SET used_posts = $1 WHERE user_id = $2', [postedCount.rows[0].count, userId]);



console.log('Data synced for', userId, 'to', quota, 'posts');



}



res.json({ success: true, message: 'All user data synchronized' });



} catch (err) {





console.error('Sync error:', err.stack);



res.status(500).json({ error: err.message });



}



});



Test with curl -X POST "http://localhost:5000/api/sync-all-user-data" -H "Authorization: Bearer YOUR_ADMIN_TOKEN".



Populate Functions Per Customer:





Update /api/generate-schedule:





app.post('/api/generate-schedule', async (req, res) => {





res.set('Content-Type', 'application/json');



try {





const userId = req.session?.user?.user_id;



if (!userId) throw new Error('No user session');



const user = await pool.query('SELECT subscription_plan FROM users WHERE user_id = $1', [userId]);



const quota = user.rows[0].subscription_plan === 'professional' ? 52 : user.rows[0].subscription_plan === 'growth' ? 27 : 12;



const currentPosts = await pool.query('SELECT COUNT(*) as count FROM post_schedule WHERE user_id = $1', [userId]);



if (currentPosts.rows[0].count > quota) {





const excess = currentPosts.rows[0].count - quota;



await pool.query('DELETE FROM post_schedule WHERE user_id = $1 AND status = $2 LIMIT $3', [userId, 'draft', excess]);



console.log('Removed', excess, 'excess drafts for', userId);



}



if (currentPosts.rows[0].count < quota) {





const toAdd = quota - currentPosts.rows[0].count;



for (let i = 0; i < toAdd; i++) {





await pool.query('INSERT INTO post_schedule (user_id, content, platform, status, scheduled_at) VALUES ($1, $2, $3, $4, $5)', [userId, 'Customer post ' + i, 'facebook', 'draft', new Date()]);



}



console.log('Added', toAdd, 'posts for', userId);



}



console.log('Schedule populated for', userId, 'with', quota, 'posts');



res.json({ success: true, count: quota });



} catch (err) {





console.error('Schedule generation error:', err.stack);



res.status(400).json({ error: err.message });



}



});



Update /api/profile (if exists) or schedule retrieval to use req.session?.user?.user_id.



Client-Side Update:





In client/src/components/BrandPurpose.jsx, trigger sync on app load or user action:





useEffect(() => { const syncData = async () => { if (req?.session?.user?.user_id) { const response = await apiRequest('/api/sync-all-user-data', { method: 'POST', headers: { Authorization: 'Bearer YOUR_ADMIN_TOKEN' } }); console.log('Global data synced:', response); } }; syncData(); }, []);



Log 'Customer data populated for ' + (req?.session?.user?.user_id || 'unknown').



Client API Fix:





In client/src/api.ts, ensure apiRequest handles per-user data:





if (!response.ok) { const text = await response.text(); console.error('Error for user ' + (req?.session?.user?.user_id || 'unknown') + ':', text); throw new Error('Server error: ' + text.substring(0, 50)); }



Return response.json().



Log 'API call to [url] for [userId] returned [status]'.



Testing:





Run locally: NODE_ENV=production tsx server/index.ts and npm start.



Test sync: curl -X POST "http://localhost:5000/api/sync-all-user-data" -H "Authorization: Bearer YOUR_ADMIN_TOKEN".



Test schedule: Generate for different user_ids and verify correct quotas (52, 27, 12).



Deployment:





Commit, sync, and redeploy in Replit.



Verify https://app.theagencyiq.ai/schedule reflects each user’s quota.



Check logs for successful sync across all users.

Commit Message:

feat: implement database-driven sync and population for all users