Permanent Phone Update Fix with Robust JSON

Task: Permanently resolve "Unexpected token '<' <!DOCTYPE..." error on /api/update-phone by enforcing JSON responses with global error handling. Update server/index.ts and client/src/api.ts for all users, preserving data and features (Brand Purpose, quota system).

Requirements:





Global Error Handling:





In server/index.ts, add at the top:





process.on('uncaughtException', (err) => { console.error('Uncaught Exception:', err.stack); process.exit(1); });



app.use((req, res, next) => { res.set('Content-Type', 'application/json'); console.log('Request:', req.method, req.url); next(); });



app.use((err, req, res, next) => { console.error('Error Handler:', err.stack); res.status(500).json({ error: 'Internal error', stack: err.stack }); });



Phone Update Endpoint:





Define /api/update-phone in server/index.ts:





Log 'Starting phone update for [req.body.email]'.



Validate session with live OAuth, log 'Session validated' or 'Session invalid: [reason]'.



Verify SMS code, log 'SMS verified for [req.body.newPhone]' or 'SMS failed: [reason]'.



Update users with new phone as user_id, log 'User updated to [req.body.newPhone]'.



Migrate post_ledger and post_schedule, log 'Data migrated from [old_phone]'.



Return { success: true, newPhone: [req.body.newPhone] } with status 200.



In try-catch: log 'Phone update failed: [error.stack]' and return { error: 'Update failed', details: [error.message] } with status 400.



Client Fix:





In client/src/api.ts, update apiRequest:





const response = await fetch(url, options);



const contentType = response.headers.get('content-type');



if (!response.ok || !contentType?.includes('application/json')) { const text = await response.text(); console.error('Non-JSON response:', text); throw new Error('Invalid response: ' + text.substring(0, 50)); }



return response.json();



Log 'API call to [url] returned [status]' before parsing.



Client Integration:





In client/src/components/BrandPurpose.jsx, update the phone modal:





Send { email, newPhone, verificationCode } to /api/update-phone.



Log 'Phone update sent for [email]: [newPhone]'.



Display error: 'Update failed: [details]' if JSON error received.



Testing:





Test with curl -X POST "http://localhost:5000/api/update-phone" -H "Content-Type: application/json" --cookie cookies.txt -d '{"email": "gailm@macleodglba.com.au", "newPhone": "+610424835189", "verificationCode": "123456"}'.



Check logs for full trace (e.g., "Starting phone update" to "Data migrated" or "Phone update failed").



Safeguards:





Preserve all posted posts and quota data during migration.



Ensure session integrity with live OAuth credentials.



Restart Replit server after changes to apply updates.



Avoid deploying until confirmed working locally to prevent live issues.



Use environment variables for sensitive data (e.g., SMS API keys) to enhance security.

Commit Message:

fix: permanent phone update with global JSON and error handling