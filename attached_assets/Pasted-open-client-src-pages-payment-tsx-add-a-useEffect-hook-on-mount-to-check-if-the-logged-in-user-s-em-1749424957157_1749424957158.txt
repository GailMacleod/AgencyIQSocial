open client/src/pages/payment.tsx, add a useEffect hook on mount to check if the logged-in user’s email is 'testuser@agencyiq.com', and if a card number input exists, set a state variable 'isTestSubscription' to true and log 'Test subscription mode enabled for testuser@agencyiq.com with password TestPass123!"' when '4242424242424242' is entered. On form submission, if 'isTestSubscription' is true, prevent Stripe submission by returning false, log 'Test subscription successful for testuser@agencyiq.com', and make a PUT request to /api/user/subscription with { subscriptions: { starter: true, growth: true, professional: true }, postLimit: 45, isTest: true } using the user’s ID. If false, proceed with Stripe and log 'Live payment attempted with password TestPass123!"'. Add a console log to display the Stripe publishable key on mount. Commit with message 'reset-mock-payment-stripe-fix' without deploying. Ensure no unauthorized changes beyond this addition."
Instructions:
Open client/src/pages/payment.tsx in Replit (ensure it exists or create it with your payment form).
Apply the prompt as written.
Add useEffect(() => { if (currentUser.email === 'testuser@agencyiq.com') { const cardInput = document.querySelector('input[name="cardnumber"]'); if (cardInput) { cardInput.addEventListener('input', (e) => { const cardNumber = e.target.value.replace(/\D/g, ''); if (cardNumber === '4242424242424242') { setIsTestSubscription(true); console.log('Test subscription mode enabled for testuser@agencyiq.com with password TestPass123!"'); } }); } console.log('Stripe publishable key:', window.Stripe ? window.Stripe.key : 'Not loaded'); }}, []); with const [isTestSubscription, setIsTestSubscription] = useState(false); at the component top.
On form submission (e.g., <form onSubmit={(e) => { e.preventDefault(); if (isTestSubscription) { console.log('Test subscription successful for testuser@agencyiq.com'); fetch('/api/user/subscription', { method: 'PUT', credentials: 'include', body: JSON.stringify({ subscriptions: { starter: true, growth: true, professional: true }, postLimit: 45, isTest: true }), headers: { 'Content-Type': 'application/json' } }); e.target.reset(); return false; } console.log('Live payment attempted with password TestPass123!"'); // Stripe logic }}>), check isTestSubscription, log success, send the PUT request, reset the form, and return false.
Save the file.
Go to the Git tab, commit with "reset-mock-payment-stripe-fix" (do not deploy).
Visit https://agency-iq-social-GailMac.replit.app/payment (or navigate via the app), log in as Username: testuser@agencyiq.com and Password: TestPass123!", enter 4242424242424242 with any future date and CVC (e.g., 12/30, 123), submit, check console for the logs and verify 45-post access at 09:23 AM AEST.
Report the outcome (e.g., mock logs present, no 404/decline error, subscriptions active) and any issues.
Validation:
If the 404 persists, check the Stripe publishable key log; if it’s a live key (e.g., pk_live_XXX), the Stripe client is misconfigured—share the log to adjust.
If the mock doesn’t trigger, ensure the cardInput selector matches your form (e.g., adjust name="cardnumber" to your input’s name).
If subscriptions don’t update, verify the PUT endpoint and user ID.
If live users are affected, confirm the email check is strict in useEffect.
Confirm, report Replit overreach.