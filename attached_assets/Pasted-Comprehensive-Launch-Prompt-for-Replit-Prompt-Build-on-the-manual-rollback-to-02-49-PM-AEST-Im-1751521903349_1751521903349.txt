Comprehensive Launch Prompt for Replit

Prompt: "Build on the manual rollback to ~02:49 PM AEST ('Improve production deployment and fix MIME type handling for application'). Verify the production build (541.1kb bundle) with ./build-production.sh. Fix the 'Failed to load module script' error with MIME type 'application/octet-stream' by opening server/index.ts, updating static file serving to app.use(express.static('dist', { setHeaders: (res, path) => { if (path.endsWith('.js')) res.set('Content-Type', 'application/javascript'); } })), and serving dist/index.html as the entry point. Create vite.config.minimal.js with:
javascript

Collapse

Wrap

Run

Copy
import { defineConfig } from 'vite';
import react from '@vitejs/plugin-react';

export default defineConfig({
  plugins: [react()],
  build: {
    outDir: 'dist',
    emptyOutDir: true,
    rollupOptions: {
      input: 'client/index.html',
    },
  },
});
Update build-production.sh to run vite build --config vite.config.minimal.js. Run ./build-production.sh, restart with Restarted Start application, and test on port 5000, ensuring no MIME errors in the browser console. Finalize server/PostQuotaService.ts with a dynamic 30-day cycle from each customer’s subscription date, enforcing 52 posts per 10 customers (520 total) with postApproved() deducting quota post-publishing. Integrate eventSchedulingService.ts for Queensland events (e.g., Ekka July 9-19) within each user’s window. Update server/auto-posting-enforcer.ts to publish 520 posts to platforms (Facebook, Instagram, LinkedIn, YouTube, X), logging in data/quota-debug.log with /api/notify-expired for failures. In client/src/pages/intelligent-schedule.tsx, sync calendar and list views with AEST timezone, displaying 520 posted contents, add a loading spinner for approvals, and ensure mobile readability with <meta name='viewport' content='width=device-width, initial-scale=1.0'> in index.html. In server/services/eventSchedulingService.ts, validate 520 event-driven posts with 1-2/day distribution. In test/, update test-comprehensive-quota-fix.js to simulate 10 customers with 520 posts, including 100 concurrent requests, 53-post exceed, and event outages, ensuring 6/6 pass. In deploy.sh, update to ./build-production.sh && node server/index.js with a pre-check (curl http://localhost:5000/api/health) and post-deployment validation (520 posts visible). Document all fixes, dynamic cycle implementation, and test results in replit.md, avoiding OAuth changes. Redeploy with ./deploy.sh after 6/6 pass, and manually verify 520 posts on platforms."