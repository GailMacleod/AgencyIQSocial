const mocha = require('mocha');
const chai = require('chai');
const axios = require('axios');
const { execSync } = require('child_process');
const assert = chai.assert;

// Configuration
const BASE_URL = 'https://4fc77172-459a-4da7-8c33-5014abb1b73e-00-dqhtnud4ismj.worf.replit.dev';
const TEST_EMAIL = 'gailm@macleodglba.com.au';
const TEST_PASSWORD = 'securePassword123'; // Replace with actual password
const TEST_USER_ID = 2;
const ADMIN_TOKEN = 'admin-token'; // Replace with actual admin token

// API client
const api = axios.create({
  baseURL: BASE_URL,
  withCredentials: true,
});

// Test Suite
describe('TheAgencyIQ Comprehensive Test Suite', function () {
  this.timeout(10000); // Allow longer timeouts for async tests
  let sessionCookie;

  before(async () => {
    // Clear session store and reset test data
    await api.post('/api/reset-test-data', {}, { headers: { Authorization: `Bearer ${ADMIN_TOKEN}` } });
  });

  // 1. Code Quality and Bloat Tests
  describe('Code Quality and Bloat', () => {
    it('should have no unused dependencies', () => {
      const unused = execSync('npx depcheck --json', { encoding: 'utf8' });
      const report = JSON.parse(unused);
      assert.equal(report.dependencies.length, 0, `Unused dependencies found: ${report.dependencies}`);
    });

    it('should have no duplicate middleware or endpoints', () => {
      const routes = execSync('grep -r "app\\..*(/api" server/routes.ts', { encoding: 'utf8' });
      const endpointCounts = {};
      routes.split('\n').forEach((line) => {
        const match = line.match(/\/api\/[\w-]+/);
        if (match) {
          endpointCounts[match[0]] = (endpointCounts[match[0]] || 0) + 1;
        }
      });
      const duplicates = Object.entries(endpointCounts).filter(([_, count]) => count > 1);
      assert.equal(duplicates.length, 0, `Duplicate endpoints found: ${JSON.stringify(duplicates)}`);
    });

    it('should have minimal bundle size', () => {
      const bundleSize = execSync('npx webpack --json | npx webpack-bundle-analyzer --json', { encoding: 'utf8' });
      const stats = JSON.parse(bundleSize);
      const totalSize = stats.assets.reduce((sum, asset) => sum + asset.size, 0);
      assert.isBelow(totalSize, 5 * 1024 * 1024, `Bundle size exceeds 5MB: ${totalSize} bytes`);
    });
  });

  // 2. Authentication and Session Management
  describe('Authentication and Session Management', () => {
    it('should login successfully', async () => {
      const res = await api.post('/login', { email: TEST_EMAIL, password: TEST_PASSWORD });
      assert.equal(res.status, 200);
      assert.match(res.data.message, new RegExp(TEST_EMAIL));
      sessionCookie = res.headers['set-cookie'];
      assert(sessionCookie, 'Session cookie not set');
    });

    it('should persist session for /api/user', async () => {
      const res = await api.get('/api/user', { headers: { Cookie: sessionCookie } });
      assert.equal(res.status, 200);
      assert.equal(res.data.userId, TEST_USER_ID);
      assert.equal(res.data.email, TEST_EMAIL);
    });

    it('should reject unauthenticated requests', async () => {
      try {
        await api.get('/api/user');
        assert.fail('Should have failed with 401');
      } catch (err) {
        assert.equal(err.response.status, 401);
        assert.equal(err.response.data.message, 'Not authenticated');
      }
    });
  });

  // 3. Subscription Management
  describe('Subscription Management', () => {
    it('should verify professional subscription', async () => {
      const res = await api.get('/api/subscription', { headers: { Cookie: sessionCookie } });
      assert.equal(res.status, 200);
      assert.equal(res.data.userId, TEST_USER_ID);
      assert.equal(res.data.plan, 'professional');
      assert.equal(res.data.active, true);
    });
  });

  // 4. Platform Connections
  describe('Platform Connections', () => {
    it('should connect Twitter platform', async () => {
      const res = await api.post('/api/connect-platform', {
        platform: 'twitter',
        userId: TEST_USER_ID,
        oauthToken: 'mock-oauth-token',
      }, { headers: { Cookie: sessionCookie } });
      assert.equal(res.status, 200);
      assert.equal(res.data.userId, TEST_USER_ID);
      assert(res.data.connectionId, 'Connection ID not returned');
    });

    it('should list connected platforms', async () => {
      const res = await api.get('/api/platform-connections', { headers: { Cookie: sessionCookie } });
      assert.equal(res.status, 200);
      const twitter = res.data.find(c => c.platform === 'twitter' && c.userId === TEST_USER_ID);
      assert(twitter, 'Twitter connection not found');
    });
  });

  // 5. Brand Purpose Retrieval
  describe('Brand Purpose', () => {
    it('should retrieve brand purpose', async () => {
      const res = await api.get('/api/brand-purpose', { headers: { Cookie: sessionCookie } });
      assert.equal(res.status, 200);
      assert.equal(res.data.userId, TEST_USER_ID);
      assert.equal(res.data.corePurpose, 'Help small businesses grow online');
    });
  });

  // 6. Post Creation and Quota Management
  describe('Post Creation and Quota', () => {
    let postId;
    it('should create a post within quota', async () => {
      const res = await api.post('/api/posts', {
        content: 'Test post for launch',
        platform: 'twitter',
      }, { headers: { Cookie: sessionCookie } });
      assert.equal(res.status, 201);
      postId = res.data.id;
      assert(postId, 'Post ID not returned');
    });

    it('should enforce quota limits', async () => {
      const quotaRes = await api.get('/api/quota', { headers: { Cookie: sessionCookie } });
      assert.equal(quotaRes.status, 200);
      assert(quotaRes.data.postsUsed >= 1);
      assert(quotaRes.data.postsRemaining >= 0);
    });

    it('should handle quota exceeded', async () => {
      // Simulate quota exceeded by mocking quota limit
      await api.post('/api/set-quota', { postsRemaining: 0 }, { headers: { Authorization: `Bearer ${ADMIN_TOKEN}` } });
      try {
        await api.post('/api/posts', { content: 'Quota test', platform: 'twitter' }, { headers: { Cookie: sessionCookie } });
        assert.fail('Should have failed with 403');
      } catch (err) {
        assert.equal(err.response.status, 403);
        assert.match(err.response.data.message, /Quota exceeded/);
      }
    });
  });

  // 7. Analytics
  describe('Analytics', () => {
    it('should retrieve analytics for a post', async () => {
      const postId = (await api.get('/api/posts', { headers: { Cookie: sessionCookie } })).data[0].id;
      const res = await api.get(`/api/analytics?postId=${postId}`, { headers: { Cookie: sessionCookie } });
      assert.equal(res.status, 200);
      assert.equal(res.data.postId, postId);
      assert(res.data.impressions >= 0);
    });
  });

  // 8. Performance Tests
  describe('Performance', () => {
    it('should respond to /api/user within 100ms', async () => {
      const start = Date.now();
      await api.get('/api/user', { headers: { Cookie: sessionCookie } });
      const duration = Date.now() - start;
      assert.isBelow(duration, 100, `Response took ${duration}ms`);
    });

    it('should handle concurrent requests', async () => {
      const requests = Array(10).fill().map(() => api.get('/api/user', { headers: { Cookie: sessionCookie } }));
      const responses = await Promise.all(requests);
      responses.forEach(res => assert.equal(res.status, 200));
    });
  });

  // 9. Security Tests
  describe('Security', () => {
    it('should enforce CORS credentials', async () => {
      const res = await api.get('/api/user', {
        headers: { Origin: 'http://malicious-site.com' },
      }).catch(err => err.response);
      assert.equal(res.status, 403, 'CORS should reject invalid origin');
    });

    it('should prevent session hijacking', async () => {
      const fakeCookie = 'aiq_md0zs6te_sgugjv2alze=fake';
      const res = await api.get('/api/user', { headers: { Cookie: fakeCookie } }).catch(err => err.response);
      assert.equal(res.status, 401, 'Invalid session should be rejected');
    });
  });

  // 10. Frontend Rendering (Basic Check)
  describe('Frontend Rendering', () => {
    it('should load brand purpose page', async () => {
      const res = await api.get('/brand-purpose', { headers: { Cookie: sessionCookie } });
      assert.equal(res.status, 200);
      assert.match(res.data, /Help small businesses grow online/);
    });
  });

  after(async () => {
    // Cleanup
    await api.post('/logout', {}, { headers: { Cookie: sessionCookie } });
  });
});

// Run tests
mocha.run();