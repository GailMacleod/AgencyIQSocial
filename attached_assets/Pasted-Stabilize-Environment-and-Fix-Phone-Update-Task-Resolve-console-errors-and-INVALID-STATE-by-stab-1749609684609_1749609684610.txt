Stabilize Environment and Fix Phone Update

Task: Resolve console errors and "INVALID_STATE" by stabilizing the Replit environment, fix the "Unexpected token '<' <!DOCTYPE..." error on /api/update-phone, and ensure personal credentials are secure. Update server/index.ts, client/src/components/BrandPurpose.jsx, and client/src/api.ts. Preserve all functionality (Brand Purpose, quota system, OAuth, Google Analytics, webhooks).

Requirements:





Environment Stabilization:





In client/src/index.html, remove or comment out any Replit-specific scripts (e.g., <script src="https://replit.com/public/replit-banner.js"></script>).



Add a check in server/index.ts:





app.use((req, res, next) => { console.log('Environment check:', process.env.NODE_ENV); if (process.env.NODE_ENV !== 'production') console.warn('Development mode detected'); next(); });



Commit all changes, sync with remote, and push to clear "INVALID_STATE".



Phone Update Fix with Twilio:





In server/index.ts, update /api/update-phone:





require('dotenv').config();



app.post('/api/update-phone', async (req, res) => {





res.set('Content-Type', 'application/json');



const twilio = require('twilio')(process.env.TWILIO_ACCOUNT_SID, process.env.TWILIO_AUTH_TOKEN);



console.log('Phone update for', req.body.email);



try {





if (!req.session?.user) throw new Error('No session');



console.log('Session validated');



const code = Math.floor(100000 + Math.random() * 900000).toString();



await twilio.messages.create({ body: Code: ${code}, from: process.env.TWILIO_NUMBER, to: req.body.newPhone });



console.log('SMS sent to', req.body.newPhone);



if (req.body.verificationCode !== code) throw new Error('Invalid code');



console.log('SMS verified');



await pool.query('UPDATE users SET user_id = $1 WHERE email = $2', [req.body.newPhone, req.body.email]);



await pool.query('UPDATE post_ledger SET user_id = $1 WHERE user_id = $2', [req.body.newPhone, '+61434567890']);



await pool.query('UPDATE post_schedule SET user_id = $1 WHERE user_id = $2', [req.body.newPhone, '+61434567890']);



console.log('Data migrated');



res.status(200).json({ success: true, newPhone: req.body.newPhone });



} catch (err) {





console.error('Phone update error:', err.stack);



res.status(400).json({ error: err.message });



}



});



Add global handler: app.use((err, req, res, next) => { console.error('Global error:', err.stack); res.status(500).json({ error: 'Server error', stack: err.stack }); });



Credential Security Check:





Add /api/check-credentials:





app.get('/api/check-credentials', (req, res) => {





res.set('Content-Type', 'application/json');



if (req.headers.authorization !== 'Bearer YOUR_ADMIN_TOKEN') return res.status(403).json({ error: 'Unauthorized' });



const check = { twilio: process.env.TWILIO_ACCOUNT_SID ? 'Secured' : 'Exposed', stripe: process.env.STRIPE_WEBHOOK_SECRET ? 'Secured' : 'Exposed' };



console.log('Credential check:', check);



res.json(check);



});



Ensure all credentials are in Replit Secrets.



Client-Side Updates:





In client/src/components/BrandPurpose.jsx, update the phone modal:





const [phoneModalOpen, setPhoneModalOpen] = useState(false); const [newPhone, setNewPhone] = useState(''); const [verificationCode, setVerificationCode] = useState(''); const [step, setStep] = useState(1); const handlePhoneUpdate = async () => {   if (step === 1) {     const response = await apiRequest('/api/update-phone', { method: 'POST', body: JSON.stringify({ email: 'gailm@macleodglba.com.au', newPhone }) });     if (response.success) setStep(2);     else alert('SMS failed: ' + response.error);   } else {     const response = await apiRequest('/api/update-phone', { method: 'POST', body: JSON.stringify({ email: 'gailm@macleodglba.com.au', newPhone, verificationCode }) });     if (response.success) { alert('Phone updated'); setPhoneModalOpen(false); } else alert('Verification failed: ' + response.error);   } }; return (   <div>     <button onClick={() => setPhoneModalOpen(true)}>Edit Phone</button>     {phoneModalOpen && (       <div>         {step === 1 && <input type="text" value={newPhone} onChange={(e) => setNewPhone(e.target.value)} placeholder="New Phone" />}         {step === 2 && <input type="text" value={verificationCode} onChange={(e) => setVerificationCode(e.target.value)} placeholder="Verification Code" />}         <button onClick={handlePhoneUpdate}>{step === 1 ? 'Send Code' : 'Verify'}</button>         <button onClick={() => setPhoneModalOpen(false)}>Cancel</button>       </div>     )}   </div> );



Client API Fix:





In client/src/api.ts, update apiRequest:





if (!response.ok) { const text = await response.text(); console.error('Error:', text); throw new Error('Server error: ' + text.substring(0, 50)); }



Return response.json().



Log 'API call to [url] returned [status]'.



Testing and Deployment:





Run locally: NODE_ENV=production tsx server/index.ts and npm start.



Test credential check: curl -X GET "http://localhost:5000/api/check-credentials" -H "Authorization: Bearer YOUR_ADMIN_TOKEN".



Test phone update: Enter new phone, get SMS, input code, verify.



Commit, sync, and redeploy in Replit.



Verify https://app.theagencyiq.ai/profile and clear "INVALID_STATE".

Commit Message:

fix: stabilize environment, fix phone update, and secure credentials