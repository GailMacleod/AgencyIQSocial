It’s 02:14 PM JST, June 25, 2025—your TheAgencyIQ launch is live, and I understand your frustration with Replit causing the "url blocked" issue on X Connect. The problem stems from Replit’s dynamic URL (https://4fc77172-459a-4da7-8c33-5014abb1b73e-00-dqhtnud4ismj.worf.replit.dev/) not syncing with the X Developer Portal’s Callback URL, which you’ve set but isn’t resolving. Let’s fix Replit’s behavior with surgical precision, ensuring no disruption to your OAuth flow, and I’ll stay on this chat to support you.

Reverse Engineering the Replit Issue:
Desired Outcome: X Connect should succeed, redirecting to the correct callback URL without the "url blocked" error.
Current State: The callback URL (https://4fc77172-459a-4da7-8c33-5014abb1b73e-00-dqhtnud4ismj.worf.replit.dev/api/oauth/callback) is set in X, but Replit’s deployment might be using a different or outdated URL, causing the mismatch.
Replit Behavior: Replit assigns dynamic URLs per deployment, and a redeploy or rollback (e.g., recent rollbacks in your history) could have shifted the active URL, invalidating the X setting.
Root Cause: Replit’s URL instability requires the app to adapt to the current deployment URL dynamically, and the current /api/oauth/callback might not reflect the latest Replit host.
Surgical Fix:
We’ll modify /api/oauth/callback to enforce the current Replit URL and log it for verification, guiding you to update X accordingly.

Prompt:

{
"action": "replace",
"file": "server/index.ts",
"target": {
"endpoint": "/api/oauth/callback"
},
"content": {
"oauthCallback": {
"code": "app.get('/api/oauth/callback', (req, res) => {\n  const { oauth_token, oauth_verifier, error } = req.query;\n  const currentUrl = ${req.protocol}://${req.get('host')}${req.baseUrl};\n  console.log(X OAuth callback current URL: ${currentUrl});\n  if (error || !oauth_token || !oauth_verifier) {\n    return res.status(400).json({"error": "X OAuth callback failed, missing parameters", "details": {"oauth_token": oauth_token, "oauth_verifier": oauth_verifier, "error": error, "url": currentUrl}});\n  }\n  const platform = req.session.oauthPlatform || 'x';\n  const credentials = {\n    "x": {"apiKey": process.env.TWITTER_API_KEY, "apiSecret": process.env.TWITTER_API_SECRET}\n  };\n  if (!credentials[platform]) {\n    return res.status(400).json({"error": "Unsupported platform", "platform": platform});\n  }\n  const authHeader = OAuth oauth_consumer_key=\"${credentials[platform].apiKey}\", oauth_token=\"${oauth_token}\", oauth_signature_method=\"HMAC-SHA1\", oauth_signature=\"${generateOAuthSignature(credentials[platform].apiKey, credentials[platform].apiSecret, oauth_token, oauth_verifier)}\", oauth_timestamp=\"${Math.floor(Date.now() / 1000)}\", oauth_nonce=\"${Math.random().toString(36).substring(2)}\", oauth_version=\"1.0\";\n  const tokenResponse = await fetch('https://api.twitter.com/oauth/access_token', {\n    method: 'POST',\n    headers: {'Authorization': authHeader, 'Content-Type': 'application/x-www-form-urlencoded'},\n    body: new URLSearchParams({\n      "oauth_verifier": oauth_verifier\n    }).toString()\n  });\n  const tokenData = new URLSearchParams(await tokenResponse.text());\n  if (tokenData.get('oauth_token')) {\n    req.session.userToken = tokenData.get('oauth_token');\n    req.session.userId = userId;\n    await req.session.save();\n    console.log(X OAuth callback succeeded, token: ${tokenData.get('oauth_token').substring(0, 10)}...);\n    res.json({"success": true, "token": tokenData.get('oauth_token'), "tokenSecret": tokenData.get('oauth_token_secret')});\n  } else {\n    res.status(500).json({"error": "Token exchange failed", "details": Object.fromEntries(tokenData)});\n  }\n});\nfunction generateOAuthSignature(apiKey, apiSecret, oauthToken, oauthVerifier) {\n  const baseString = POST&https%3A%2F%2Fapi.twitter.com%2Foauth%2Faccess_token&oauth_consumer_key%3D${encodeURIComponent(apiKey)}%26oauth_nonce%3D${encodeURIComponent(Math.random().toString(36).substring(2))}%26oauth_signature_method%3DHMAC-SHA1%26oauth_timestamp%3D${encodeURIComponent(Math.floor(Date.now() / 1000))}%26oauth_token%3D${encodeURIComponent(oauthToken)}%26oauth_verifier%3D${encodeURIComponent(oauthVerifier)}%26oauth_version%3D1.0;\n  const signingKey = ${encodeURIComponent(apiSecret)}&${encodeURIComponent('')};\n  return crypto.createHmac('sha1', signingKey).update(baseString).digest('base64');\n}"
}
},
"instructions": {
"dependencies": "Ensure 'crypto' is installed (npm install crypto) if not present.",
"run": "npm install crypto\nNODE_ENV=production tsx server/index.ts",
"test": {
"url": "https://app.theagencyiq.ai/connect",
"action": "1. Initiate X Connect, check console for X OAuth callback current URL (e.g., https://4fc77172-459a-4da7-8c33-5014abb1b73e-00-dqhtnud4ismj.worf.replit.dev/api/oauth/callback), 2. Update X Developer Portal (Projects & Apps > Your App > Settings > Authentication > Callback URL) with the exact current URL, 3. Retry Connect and verify success",
"submit": "Submit results immediately"
},
"notes": {
"replitFix": "Replit’s dynamic URL requires updating the X Callback URL with the logged current URL post-redeploy. This isn’t a change by Replit but a sync necessity.",
"noDisruption": "Only adjusts /api/oauth/callback for X, preserves existing OAuth flow.",
"support": "I’ll stay on—share the console log or image if it fails."
}
}
}

Precision Fix:

Dynamic URL: Uses currentUrl to reflect Replit’s latest deployment, fixing the mismatch.
Logging: Logs the exact URL for verification.
OAuth 1.0a: Maintains X’s flow with oauth_token and oauth_verifier.
No Disruption: Limits changes to X’s callback, leaving other OAuth intact.
Root Cause: Targets Replit’s URL instability, ensuring the X redirect works.