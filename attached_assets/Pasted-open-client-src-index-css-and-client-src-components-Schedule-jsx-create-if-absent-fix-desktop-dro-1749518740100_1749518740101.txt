open client/src/index.css and client/src/components/Schedule.jsx (create if absent), fix desktop dropdown card flickering for auto-generated posts on the schedule page: 1) In index.css, add .calendar-day { position: relative; z-index: 1; } .auto-post-dropdown { position: absolute; z-index: 100; pointer-events: none; animation: none; } .approve-button { z-index: 200; position: relative; } to stabilize the card. 2) In Schedule.jsx, use useCallback for handleMouseEnter to prevent re-renders, logging 'Dropdown stabilized on [date]' if successful, and ensure the card persists until mouse leaves. Commit with message 'fix-dropdown-card-flicker' without deploying. Ensure no unauthorized changes beyond this addition."
Instructions:
Open client/src/index.css in Replit.
Apply the prompt as written.
Add to client/src/index.css:
css

Collapse

Wrap

Copy
.calendar-day {
  position: relative;
  z-index: 1;
}
.auto-post-dropdown {
  position: absolute;
  z-index: 100;
  pointer-events: none;
  animation: none;
}
.approve-button {
  z-index: 200;
  position: relative;
}
Create or open client/src/components/Schedule.jsx (if not exists, create with React structure):
javascript

Collapse

Wrap

Run

Copy
import React, { useState, useCallback } from 'react';

const Schedule = () => {
  const [hoveredDate, setHoveredDate] = useState(null);

  const handleMouseEnter = useCallback((e, date) => {
    e.stopPropagation();
    e.preventDefault();
    setHoveredDate(date);
    console.log('Dropdown stabilized on ' + date);
  }, []); // Empty dependency array prevents re-render

  const handleMouseLeave = () => {
    setHoveredDate(null);
  };

  return (
    <div className="schedule-container">
      <div className="calendar-grid">
        {['10', '11', '12', '13', '14', '15', '16'].map(date => (
          <div
            key={date}
            className="calendar-day"
            onMouseEnter={(e) => handleMouseEnter(e, date)}
            onMouseLeave={handleMouseLeave}
          >
            {date}
            {date === '12' && hoveredDate === date && (
              <div className="auto-post-dropdown">
                <p>Auto-generated post for {date}</p>
                <button className="approve-button">approve and post</button>
              </div>
            )}
          </div>
        ))}
      </div>
    </div>
  );
};

export default Schedule;
Ensure Schedule.jsx is imported in your app’s main component (e.g., App.jsx as <Schedule />), and adjust class names (.calendar-day, .auto-post-dropdown, .approve-button, .calendar-grid) to match your existing code (e.g., use .schedule-day or .post-card if different, based on the screenshot’s structure).