To fix this sloppy rollback and make the frontend look/work like before (but bulletproof), here's the no-BS plan—phases with code tweaks based on 2025 fixes (e.g., proper Vite output for Replit routing):

Tweak vite.config.js for Build Fixes: Update to handle syntax tokens in deps (esbuild minify tweaks), add base for SPA reloads without MIME bombs. This smashes unexpected '<' by ensuring clean JS outputs.
js

Collapse

Wrap

Copy
import { defineConfig } from "vite";
import react from "@vitejs/plugin-react";
import path from "path";
import runtimeErrorOverlay from "@replit/vite-plugin-runtime-error-modal";

export default defineConfig(async ({ mode }) => {
  const plugins = [
    react({ jsxRuntime: 'automatic' }), // Helps with syntax in React deps
    runtimeErrorOverlay(),
  ];

  if (process.env.NODE_ENV !== "production" && process.env.REPL_ID) {
    const { cartographer } = await import("@replit/vite-plugin-cartographer");
    plugins.push(cartographer());
  }

  return {
    plugins,
    base: '/', // Fix reload MIME errors on Replit
    resolve: {
      alias: {
        "@": path.resolve(import.meta.dirname, "client", "src"),
        "@shared": path.resolve(import.meta.dirname, "shared"),
        "@assets": path.resolve(import.meta.dirname, "attached_assets"),
      },
    },
    root: path.resolve(import.meta.dirname, "client"),
    build: {
      outDir: path.resolve(import.meta.dirname, "dist/public"),
      emptyOutDir: true,
      rollupOptions: {
        output: {
          manualChunks: id => {
            if (id.includes('node_modules')) {
              if (id.includes('react')) return 'react-vendor';
              if (id.includes('@radix-ui') || id.includes('@tanstack')) return 'ui-vendor';
              return 'vendor';
            }
          },
          chunkFileNames: 'assets/[name]-[hash].js',
          entryFileNames: 'assets/[name]-[hash].js',
          assetFileNames: 'assets/[name]-[hash].[ext]',
        },
      },
      minify: 'esbuild',
      sourcemap: mode === 'development', // Enable in dev for syntax debug
      target: 'es2020',
      cssCodeSplit: true,
      manifest: true, // For server to map MIME properly
    },
    server: {
      proxy: { '/api': 'http://localhost:3000' }, // If backend separate, avoid CORS
    },
  };
});
Gut Server/index.ts for Routing/MIME Overrides: Force JS serves with headers to kill octet-stream/text/html. Add SPA fallback only for non-asset paths (prevent HTML on .js fetches).
js

Collapse

Wrap

Copy
// In server/index.ts, around static serving:
const express = require('express');
const app = express();

app.use(express.static('dist/public', {
  setHeaders: (res, path) => {
    if (path.endsWith('.js') || path.endsWith('.jsx')) {
      res.set('Content-Type', 'application/javascript');
    }
  }
}));

// SPA fallback - AFTER static, only for non-assets
app.get('*', (req, res) => {
  if (!req.url.startsWith('/assets/')) { // Avoid fallback on JS paths
    res.sendFile(path.resolve(__dirname, 'dist/public/index.html'));
  } else {
    res.status(404).send('Not found');
  }
});
Patch typescript-transformer.ts for Import Resolution: Strip .tsx fully in transforms to prevent browsers fetching wrong extensions (causing HTML '<' errors).
js

Collapse

Wrap

Copy
// In typescript-transformer.ts, update replacement:
code = code.replace(/from\s+["']\.\/([^"']+)\.tsx["']/g, "from './$1'");
Integrate & Test Flows: Rebuild (vite build), restart Replit, curl test (e.g., curl -I your-repl-url/assets/main-[hash].js should show application/javascript, content starts with JS not '<'). Smoke test: OAuth login (tokens set in cookies without module fails), sessions persist (refresh keeps logged), quotas update (simulate hits, enforce limits), auto-post schedule/fires (no ghosts), onboarding submits/verifs (no races). Scales for hundreds? Add Redis for sessions/quotas if DB bottlenecks.
This should restore your "better-looking" frontend without the breaks—hit me with current files (vite.config.js, server/index.ts, etc.) post-rollback, and I'll review/gut 'em specifically. No more crap; let's scale this autonomously.