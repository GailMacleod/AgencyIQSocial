Migrate the phone number update to a local Node.js environment using Twilio, fixing the "Unexpected token '<' <!DOCTYPE..." error. Export data from Replit, update server/index.ts, client/src/components/BrandPurpose.jsx, and client/src/api.ts. Preserve all functionality (Brand Purpose, quota system, OAuth, Google Analytics).

Requirements:





Local Server with Twilio:





Install dependencies locally: npm install pg twilio express.



In server/index.ts, set up:





const express = require('express'); const app = express(); app.use(express.json());



Twilio: const twilio = require('twilio')('YOUR_ACCOUNT_SID', 'YOUR_AUTH_TOKEN'); (use signup credentials).



PostgreSQL: const { Pool } = require('pg'); const pool = new Pool({ user: 'your_user', host: 'localhost', database: 'agencyiq', password: 'your_password', port: 5432 });.



Define /api/update-phone:





app.use((req, res, next) => { res.set('Content-Type', 'application/json'); next(); });



app.post('/api/update-phone', async (req, res) => {





Log 'Starting phone update for [req.body.email]'.



Validate session (mock for now: if (!req.headers.authorization) throw new Error('No session');), log 'Session validated'.



Generate code: const code = Math.floor(100000 + Math.random() * 900000).toString();



Send SMS: await twilio.messages.create({ body: Verification code: ${code}, from: 'YOUR_TWILIO_NUMBER', to: req.body.newPhone });, log 'SMS sent to [req.body.newPhone]'.



Verify: if (req.body.verificationCode !== code) throw new Error('Invalid code');, log 'SMS verified'.



Update users: await pool.query('UPDATE users SET user_id = $1 WHERE email = $2', [req.body.newPhone, req.body.email]);



Migrate data: await pool.query('UPDATE post_ledger SET user_id = $1 WHERE user_id = $2', [req.body.newPhone, '+61434567890']); await pool.query('UPDATE post_schedule SET user_id = $1 WHERE user_id = $2', [req.body.newPhone, '+61434567890']);



Log 'Data migrated'.



res.status(200).json({ success: true, newPhone: req.body.newPhone });



}).catch(err => { console.error('Error:', err.stack); res.status(400).json({ error: err.message }); });



Export data: app.get('/api/export-data', (req, res) => { // Mock export, replace with DB query });, log 'Data exported'.



Database Setup:





Create locally: createdb agencyiq, run schema SQL from prior response.



Import Replit data via /api/export-data (manual copy if needed).



Client Integration:





In client/src/components/BrandPurpose.jsx, update the phone modal:





First call: apiRequest('/api/update-phone', { method: 'POST', body: JSON.stringify({ email, newPhone }) }) for SMS.



Second call: Send { email, newPhone, verificationCode }.



Log 'Phone update sent for [email]: [newPhone]'.



Show error: 'Update failed: [details]'.



Client API Fix:





In client/src/api.ts, update apiRequest:





if (!response.ok) { const text = await response.text(); console.error('Error:', text); throw new Error('Server error: ' + text.substring(0, 50)); }



Return response.json().



Log 'API call to [url] returned [status]'.



Preserve Functionality:





Copy existing /api/brand-posts, /api/approve-post, /api/quota-status to server/index.ts.



Test with curls (e.g., curl -X GET "http://localhost:5000/api/quota-status").



Testing and Deployment:





Run: node server/index.ts and npm start.



Test: curl -X POST "http://localhost:5000/api/update-phone" -H "Content-Type: application/json" -d '{"email": "gailm@macleodglba.com.au", "newPhone": "+610424835189"}', then with verification code.



Check logs for "Data migrated".



Deploy to Heroku or similar if successful.

Commit Message:

feat: local Twilio phone update migration with data export