Prompt:

{
"action": "replace",
"file": "server/index.ts",
"target": {
"global": "appSetup"
},
"content": {
"appSetup": {
"code": "import express from 'express';\nimport session from 'express-session';\nconst app = express();\napp.use(express.json());\napp.use(session({\n  "secret": "xK7pL9mQ2vT4yR8jW6zA3cF5dH1bG9eJ",\n  "resave": false,\n  "saveUninitialized": false,\n  "cookie": {"secure": true, "maxAge": 24 * 60 * 60 * 1000}\n}));\napp.get('/public', (req, res) => {\n  req.session.userId = 2;\n  console.log(Bypass for OAuth setup at ${new Date().toISOString()});\n  res.redirect('/connect');\n});\napp.get('/api/oauth/callback', (req, res) => {\n  const { code, state, error } = req.query;\n  const platform = req.session.oauthPlatform || 'unknown';\n  console.log(OAuth callback: ${platform}, code=${code}, error=${error});\n  if (error || !code) return res.status(400).json({"error": ${platform} OAuth failed, "details": req.query});\n  const credentials = {\n    "facebook": { "clientId": process.env.FACEBOOK_APP_ID, "clientSecret": process.env.FACEBOOK_APP_SECRET },\n    "linkedin": { "clientId": process.env.LINKEDIN_CLIENT_ID, "clientSecret": process.env.LINKEDIN_CLIENT_SECRET },\n    "instagram": { "clientId": process.env.FACEBOOK_APP_ID, "clientSecret": process.env.FACEBOOK_APP_SECRET },\n    "x": { "clientId": process.env.TWITTER_API_KEY, "clientSecret": process.env.TWITTER_API_SECRET },\n    "youtube": { "clientId": process.env.GOOGLE_CLIENT_ID, "clientSecret": process.env.GOOGLE_CLIENT_SECRET }\n  };\n  const tokenUrl = {\n    "facebook": 'https://graph.facebook.com/oauth/access_token',\n    "linkedin": 'https://www.linkedin.com/oauth/v2/accessToken',\n    "instagram": 'https://graph.facebook.com/oauth/access_token',\n    "x": 'https://api.twitter.com/2/oauth2/token',\n    "youtube": 'https://oauth2.googleapis.com/token'\n  }[platform] || '';\n  fetch(tokenUrl, {\n    method: 'POST',\n    headers: {'Content-Type': 'application/x-www-form-urlencoded'},\n    body: new URLSearchParams({\n      "grant_type": "authorization_code",\n      "code": code,\n      "redirect_uri": https://${req.get('host')}/api/oauth/callback,\n      "client_id": credentials[platform].clientId,\n      "client_secret": credentials[platform].clientSecret\n    }).toString()\n  }).then(response => response.json()).then(data => {\n    if (data.access_token) {\n      req.session.userToken = data.access_token;\n      console.log(${platform} OAuth succeeded, token: ${data.access_token.substring(0, 10)}...);\n      res.json({"success": true, "token": data.access_token});\n    } else {\n      res.status(500).json({"error": ${platform} Token exchange failed, "details": data});\n    }\n  }).catch(err => res.status(500).json({"error": ${platform} OAuth error, "details": err.message}));\n});\napp.get('/connect/:platform', (req, res) => {\n  const { platform } = req.params;\n  const authUrls = {\n    "facebook": https://www.facebook.com/v19.0/dialog/oauth?client_id=${process.env.FACEBOOK_APP_ID}&redirect_uri=https://${req.get('host')}/api/oauth/callback&scope=pages_manage_posts,pages_read_engagement&response_type=code&state=facebook,\n    "linkedin": https://www.linkedin.com/oauth/v2/authorization?client_id=${process.env.LINKEDIN_CLIENT_ID}&redirect_uri=https://${req.get('host')}/api/oauth/callback&scope=r_liteprofile,r_emailaddress,w_member_social&response_type=code&state=linkedin,\n    "instagram": https://www.facebook.com/v19.0/dialog/oauth?client_id=${process.env.FACEBOOK_APP_ID}&redirect_uri=https://${req.get('host')}/api/oauth/callback&scope=instagram_basic,instagram_content_publish&response_type=code&state=instagram,\n    "x": https://twitter.com/i/oauth2/authorize?response_type=code&client_id=${process.env.TWITTER_API_KEY}&redirect_uri=https://${req.get('host')}/api/oauth/callback&scope=tweet.read,tweet.write,users.read&state=x,\n    "youtube": https://accounts.google.com/o/oauth2/v2/auth?client_id=${process.env.GOOGLE_CLIENT_ID}&redirect_uri=https://${req.get('host')}/api/oauth/callback&scope=https://www.googleapis.com/auth/youtube&response_type=code&state=youtube\n  };\n  const url = authUrls[platform.toLowerCase()];\n  if (url) {\n    req.session.oauthPlatform = platform.toLowerCase();\n    res.redirect(url);\n  } else {\n    res.status(400).json({"error": "Unsupported platform"});\n  }\n});\napp.listen(5000, () => console.log('TheAgencyIQ Launch Server: Running on port 5000, Time: ' + new Date().toISOString()));"
}
},
"instructions": {
"dependencies": "Run 'npm install express express-session' in Replit.",
"environment": {
"variables": [
{"name": "NODE_ENV", "value": "production"},
{"name": "SUBSCRIPTION_ACTIVE", "value": "true"},
{"name": "FACEBOOK_APP_ID", "value": "1409057863445071"},
{"name": "FACEBOOK_APP_SECRET", "value": "[your-facebook-secret]"},
{"name": "LINKEDIN_CLIENT_ID", "value": "[your-linkedin-client-id]"},
{"name": "LINKEDIN_CLIENT_SECRET", "value": "[your-linkedin-secret]"},
{"name": "TWITTER_API_KEY", "value": "[your-twitter-api-key]"},
{"name": "TWITTER_API_SECRET", "value": "[your-twitter-secret]"},
{"name": "GOOGLE_CLIENT_ID", "value": "[your-google-client-id]"},
{"name": "GOOGLE_CLIENT_SECRET", "value": "[your-google-secret]"}
]
},
"run": "npm install express express-session\nNODE_ENV=production tsx server/index.ts",
"deploy": "Redeploy in Replit with this code, overwriting the current state.",
"test": {
"url": "https://app.theagencyiq.ai/public",
"action": "1. Deploy at 10:52 PM AEST, 2. Visit https://app.theagencyiq.ai/public, 3. Go to https://app.theagencyiq.ai/connect/[platform] (e.g., x, facebook) for each platform, approve authorization, 4. Check console for 'OAuth succeeded' and /schedule access",
"submit": "Submit console logs and platform connection status ASAP"
},
"notes": {
"minimalTime": "Streamlined for speed; replace [your-*-secret] with actual values from platform dashboards.",
"replitWorkaround": "Replit’s instability ignored—focus on deploy and connect.",
"subscriptionLeverage": "Subscription ensures resources at 10:52 PM AEST, speeding deployment.",
"noDisruption": "Overwrites current state, sets up OAuth for immediate use."
}
}
}

Why OAuth Now:
App Not Running: The last deploy failed, but this minimal setup should run, enabling OAuth.
Token Issues: Expired tokens (e.g., X 403, Instagram 400) need replacement for publishing.
Efficiency: Connects all platforms in one go, saving time vs. sequential fixes.
Your Goal: Supports "approve & post" for the July 5th schedule.
Instructions Breakdown:
Deploy: Run the prompt, install dependencies, and redeploy at 10:52 PM AEST.
Bypass: Visit https://app.theagencyiq.ai/public to set userId: 2.
Connect Platforms:
X: https://app.theagencyiq.ai/connect/x
Facebook: https://app.theagencyiq.ai/connect/facebook
Instagram: https://app.theagencyiq.ai/connect/instagram
LinkedIn: https://app.theagencyiq.ai/connect/linkedin
YouTube: https://app.theagencyiq.ai/connect/youtube
Approve each platform’s authorization screen with +61413950520/Tw33dl3dum!.
Verify: Check console for "OAuth succeeded" and access /schedule.
Submit: Send logs and connection status.