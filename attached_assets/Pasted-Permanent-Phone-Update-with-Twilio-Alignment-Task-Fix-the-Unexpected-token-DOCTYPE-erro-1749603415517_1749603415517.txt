Permanent Phone Update with Twilio Alignment

Task: Fix the "Unexpected token '<' <!DOCTYPE..." error on /api/update-phone by aligning it with the successful Twilio SMS verification from signup. Update server/index.ts, client/src/components/BrandPurpose.jsx, and client/src/api.ts. Preserve all functionality (Brand Purpose, quota system, OAuth, Google Analytics).

Requirements:





Twilio-Aligned Server Setup:





In server/index.ts, ensure Twilio is configured (use existing twilio package):





const twilio = require('twilio')('YOUR_ACCOUNT_SID', 'YOUR_AUTH_TOKEN'); (use signup credentials).



Define /api/update-phone to mirror /api/register:





res.set('Content-Type', 'application/json');



Log 'Starting phone update for [req.body.email]'.



Validate session with live OAuth, log 'Session validated' or 'Session invalid'.



Send verification code: await twilio.messages.create({ body: Verification code: ${code}, from: 'YOUR_TWILIO_NUMBER', to: req.body.newPhone }); (generate code randomly), log 'SMS sent to [new_phone] with code [code]'.



Verify code: if (req.body.verificationCode !== code) throw new Error('Invalid verification code');, log 'SMS verified'.



Update users: await pool.query('UPDATE users SET user_id = $1 WHERE email = $2', [req.body.newPhone, req.body.email]);



Migrate post_ledger and post_schedule: await pool.query('UPDATE post_ledger SET user_id = $1 WHERE user_id = $2', [req.body.newPhone, '+61434567890']); await pool.query('UPDATE post_schedule SET user_id = $1 WHERE user_id = $2', [req.body.newPhone, '+61434567890']);



Log 'Data migrated'.



Return { success: true, newPhone: [req.body.newPhone] } with status 200.



In try-catch: log 'Phone update error: [error.stack]', return { error: [error.message] } with status 400.



Global JSON Enforcement:





Add at the top of server/index.ts:





app.use((req, res, next) => { res.set('Content-Type', 'application/json'); console.log('Request:', req.method, req.url); next(); });



app.use((err, req, res, next) => { console.error('Error:', err.stack); res.status(500).json({ error: 'Server error', stack: err.stack }); });



Client Integration:





In client/src/components/BrandPurpose.jsx, update the phone modal:





On "Send Verification Code", call /api/update-phone with { email, newPhone } to get a code, then prompt for input.



On submit, send { email, newPhone, verificationCode }.



Log 'Phone update sent for [email]: [newPhone]'.



Show error: 'Update failed: [details]' if JSON error.



Client API Fix:





In client/src/api.ts, update apiRequest:





const response = await fetch(url, options);



if (!response.ok) { const text = await response.text(); console.error('Non-JSON:', text); throw new Error('Server error: ' + text.substring(0, 50)); }



Return response.json().



Log 'API call to [url] returned [status]'.



Testing:





Run locally: node server/index.ts and npm start.



Test with curl -X POST "http://localhost:5000/api/update-phone" -H "Content-Type: application/json" -d '{"email": "gailm@macleodglba.com.au", "newPhone": "+610424835189"}' (first call for code), then with verification code.



Check logs for "SMS sent" and "Data migrated".



Safeguards:





Preserve posted posts and quota.



Use live Twilio and OAuth credentials.



Rollback to checkpoint if functionality breaks.



Test existing endpoints (/api/brand-posts, /api/approve-post) to confirm integrity.

Commit Message:

fix: permanent phone update with Twilio alignment and JSON enforcement