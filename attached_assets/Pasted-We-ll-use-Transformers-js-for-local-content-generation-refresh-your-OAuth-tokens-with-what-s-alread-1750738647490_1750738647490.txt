We’ll use Transformers.js for local content generation, refresh your OAuth tokens with what’s already in place, and lock down the post count ledger—all within Replit. Your platforms stay, and we’ll make this a beast.

1. Local Content Generation
Setup: Install Transformers.js (npm install @xenova/transformers).
Code:
javascript

Collapse

Wrap

Run

Copy
const { pipeline } = require('@xenova/transformers');
let generator;
(async () => {
  generator = await pipeline('text-generation', 'distilgpt2');
})();

const generateContent = async () => {
  if (!generator) return 'Tech update: AI in action! #tech';
  const output = await generator('Write a tech social media post.', { max_length: 50, num_return_sequences: 1 });
  return output[0].generated_text;
};
2. Token Refresh with Existing Setup
Database: Ensure oauth_tokens table exists (platform, access_token, refresh_token, expires_at).
Code:
javascript

Collapse

Wrap

Run

Copy
const refreshTokens = async () => {
  const platforms = ['x', 'youtube', 'linkedin', 'facebook'];
  for (const platform of platforms) {
    const token = await db.select({ refresh: oauth_tokens.refresh_token, expires: oauth_tokens.expires_at }).from(oauth_tokens).where(eq(oauth_tokens.platform, platform)).get();
    if (token && new Date(token.expires) < new Date()) {
      try {
        const response = await fetch(`https://${platform === 'x' ? 'api.twitter.com' : platform}.com/oauth2/token`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
          body: `grant_type=refresh_token&refresh_token=${token.refresh}&client_id=${process.env[${platform.toUpperCase()}_CLIENT_ID]}&client_secret=${process.env[${platform.toUpperCase()}_CLIENT_SECRET]}`
        });
        const data = await response.json();
        if (data.access_token) {
          await db.update(oauth_tokens).set({ access_token: data.access_token, expires_at: new Date(Date.now() + data.expires_in * 1000) }).where(eq(oauth_tokens.platform, platform));
        }
      } catch (error) {
        console.error(`[ERROR] ${platform} refresh failed: ${error.message}`);
      }
    }
  }
};
// Add to .replit: `run = "node server.js && replit cron 3600 refreshTokens"`
3. Post Generation and Ledger Fix
Code:
javascript

Collapse

Wrap

Run

Copy
app.post('/auto-generate-content-schedule', async (req, res) => {
  const userId = req.body.phone || '+61424835189';
  await db.transaction(async (tx) => {
    const subscription = await tx.select({ plan: subscriptions.plan }).from(subscriptions).where(eq(subscriptions.userId, userId)).get();
    const quotas = { starter: 12, growth: 27, professional: 52 };
    const quota = quotas[subscription.plan.toLowerCase()] || 12;
    const currentQuota = await tx.select({ count: sql`COUNT(*)` }).from(posts).where(sql`${posts.userId} = ${userId} AND ${posts.status} = 'success'`);
    const remaining = Math.max(0, quota - currentQuota.count);
    console.log('[DEBUG] Remaining:', remaining);
    await tx.delete(posts).where(sql`${posts.userId} = ${userId} AND ${posts.status} != 'success'`);
    const newPosts = [];
    if (remaining > 0) {
      const content = await generateContent();
      newPosts.push(...Array.from({ length: remaining }, (_, i) => ({
        id: Date.now() + i, userId, content, status: 'pending', publishedAt: null, platform: req.body.platform || 'x'
      })));
      await tx.insert(posts).values(newPosts);
    }
    const after = await tx.select().from(posts).where(eq(posts.userId, userId));
    console.log('[DEBUG] After count:', after.length, 'Sample:', newPosts[0]?.content);
  });
  res.send('Schedule generated');
});
4. Auto-Posting with Resilience
Code:
javascript

Collapse

Wrap

Run

Copy
const Queue = require('bull');
const postQueue = new Queue('posts', { redis: { host: 'localhost', port: 6379 } });

postQueue.process(async (job) => {
  const { post } = job.data;
  const token = await db.select({ access_token: oauth_tokens.access_token }).from(oauth_tokens).where(eq(oauth_tokens.platform, post.platform)).get();
  if (!token.access_token) throw new Error('No token');
  try {
    const response = await fetch(`https://api.${post.platform}.com/endpoint`, { // Adjust endpoints
      method: 'POST',
      headers: { Authorization: `Bearer ${token.access_token}`, 'Content-Type': 'application/json' },
      body: JSON.stringify({ text: post.content })
    });
    if (response.ok) {
      await db.update(posts).set({ status: 'success', publishedAt: new Date() }).where(eq(posts.id, post.id));
    } else {
      await db.update(posts).set({ status: 'failed' }).where(eq(posts.id, post.id));
    }
  } catch (error) {
    await db.update(posts).set({ status: 'failed' }).where(eq(posts.id, post.id));
    throw error;
  }
});

const enforcePublishing = async () => {
  const posts = await db.select().from(posts).where(eq(posts.status, 'pending'));
  console.log('[DEBUG] Pending posts:', posts.length);
  for (const post of posts) postQueue.add({ post });
};
setInterval(enforcePublishing, 30000);
5. Replit Setup
.replit:
text

Collapse

Wrap

Copy
run = "npm install && node server.js"
[deploy]
quantity = 1
[cron]
3600 = "refreshTokens"
replit.nix:
text

Collapse

Wrap

Copy
{ pkgs }: {
  deps = [ pkgs.nodejs-18_x pkgs.postgresql pkgs.redis ];
}
Secrets: Use existing X_CLIENT_ID, X_CLIENT_SECRET, etc., from your OAuth setups.
Next Step: Ignite This Motherfucker
Action:
Set up PostgreSQL in Replit, create tables with:
javascript

Collapse

Wrap

Run

Copy
const Sequelize = require('sequelize');
const sequelize = new Sequelize('database', 'user', 'password', { dialect: 'postgres', host: 'localhost' });
const User = sequelize.define('User', { email: String, phone: String, plan: String });
const Post = sequelize.define('Post', { userId: Integer, content: String, status: String, platform: String, publishedAt: Date });
const OAuthToken = sequelize.define('OAuthToken', { platform: String, access_token: String, refresh_token: String, expires_at: Date });
sequelize.sync();
Install: npm install @xenova/transformers sequelize pg bull.
Update server.js with the code above.
Insert existing refresh tokens into oauth_tokens (from your dashboards).
Trigger /auto-generate-content-schedule, check logs.
Query: SELECT COUNT(*) FROM posts WHERE user_id = '+61424835189' GROUP BY status;
Share logs and result.
Why: Keeps your platforms, uses local generation, re