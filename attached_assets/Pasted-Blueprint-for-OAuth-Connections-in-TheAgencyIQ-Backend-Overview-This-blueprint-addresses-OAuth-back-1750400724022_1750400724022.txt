Blueprint for OAuth Connections in TheAgencyIQ Backend

Overview
This blueprint addresses OAuth backend issues in TheAgencyIQ, ensuring stable, fail-proof platform connections (Facebook, LinkedIn, X/Twitter, Instagram, YouTube) without user exposure to OAuth flows. It implements automatic token management, enforces 30-day posting cycles, and prevents failures, targeting 99.9% reliability. The solution uses Replit's environment and integrates with the existing PostgreSQL database.

Files
server/index.ts: Main backend file for API endpoints and OAuth logic.
server/oauth-config.js: Configuration for OAuth credentials and scopes.
server/models/connection.ts: Database schema for platform connections.
server/services/postRetryService.ts: Retry logic for failed posts.
server/middleware/authMiddleware.ts: Session and token validation middleware.
database/migrations/20250620_create_connections_table.sql: Migration for connection table.
.replit: Replit configuration file for environment setup.
Commands
NODE_ENV=production tsx server/index.ts: Run the production server locally.
npx drizzle-kit generate:pg: Generate migration files for database changes.
npx drizzle-kit migrate: Apply database migrations.
git add -A && git commit -m "implement-oauth-blueprint": Commit changes without deploying.
Config Files
.env: Store OAuth credentials (e.g., TWITTER_CONSUMER_KEY, FACEBOOK_APP_SECRET) and PostgreSQL URI.
drizzle.config.ts: Configure Drizzle ORM with PostgreSQL connection.
package.json: Ensure dependencies like passport, passport-oauth2, pg, and drizzle-orm are installed.
Setup Foundation
Database Schema:
Create connections table:
sql

Collapse

Wrap

Copy
CREATE TABLE connections (
    id SERIAL PRIMARY KEY,
    user_phone VARCHAR(12) UNIQUE NOT NULL,
    platform VARCHAR(20) NOT NULL,
    platform_user_id VARCHAR(50),
    access_token VARCHAR(255) NOT NULL,
    refresh_token VARCHAR(255),
    expires_at TIMESTAMP,
    is_active BOOLEAN DEFAULT TRUE,
    connected_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
Link to existing users and posts tables via user_phone.
OAuth Configuration:
Use passport for OAuth flows with platform-specific strategies.
Define scopes:
Facebook: public_profile, pages_show_list, pages_manage_posts, pages_read_engagement
LinkedIn: r_liteprofile, w_member_social
X/Twitter: tweet.read, tweet.write, users.read
Instagram: instagram_basic, pages_show_list, pages_manage_posts (via Facebook)
YouTube: https://www.googleapis.com/auth/youtube
Automatic Connection Management:
Implement a background task in server/index.ts to check token expiration every 5 minutes.
Use refresh_token to renew access_token before expiration, logging 'Token refreshed [phone] for [platform]'.
Redirect to /connect only if refresh fails, prompting username/password re-entry.
Fail-Proof Publishing:
Add pre-flight checks in /api/post to validate tokens and platform health.
Use postRetryService.ts to queue failed posts, but prioritize prevention with health monitoring.
Log 'Post validated [phone] for [platform]' on success.
30-Day Cycle Management:
Track subscription start date in users table.
Notify users via email (using a cron job) 1 day before cycle end to approve/edit new schedule.
Enforce 30-day posting window in /api/auto-post, logging 'Cycle completed [phone]'.
Focused Prompt to Implement Blueprint
Prompt: "In Replit, open server/index.ts, server/oauth-config.js, and server/models/connection.ts, implement OAuth backend blueprint: 1) In server/index.ts, add /api/check-connection to run every 5 minutes (setInterval), validating tokens with refresh logic using refresh_token, redirecting to /connect if failed, logging 'Token refreshed [phone] for [platform]' or 'Redirect to connect [phone]'. 2) In server/oauth-config.js, configure passport strategies for Facebook, LinkedIn, X/Twitter, Instagram, YouTube with specified scopes, logging 'OAuth configured [platform]'. 3) In server/models/connection.ts, define connections table schema, migrate with npx drizzle-kit migrate. 4) Update /api/post to include pre-flight token and health checks, logging 'Post validated [phone] for [platform]'. 5) Add /api/cycle-notify cron job to email users 1 day before 30-day cycle end, logging 'Cycle notify [phone]'. Commit with message 'implement-oauth-blueprint' without deploying. Run locally (NODE_ENV=production tsx server/index.ts), access https://app.theagencyiq.ai, navigate to /schedule, verify connections stay active, check auto-posting, and review logs at 04:30 PM AEST on Friday, June 20, 2025. Report outcome (e.g., connections stable, posts auto-posted, logs present) and issues, including full console output."

Instructions:

Open server/index.ts, add check-connection endpoint with setInterval.
Open server/oauth-config.js, configure passport strategies.
Open server/models/connection.ts, define schema, run migrations.
Update /api/post with pre-flight checks.
Add /api/cycle-notify with cron job.
Save all files.
Run npx drizzle-kit migrate in terminal.
Commit with git add -A && git commit -m "implement-oauth-blueprint" (do not deploy).
Run locally with NODE_ENV=production tsx server/index.ts.
Access https://app.theagencyiq.ai, check /schedule, verify auto-posting.