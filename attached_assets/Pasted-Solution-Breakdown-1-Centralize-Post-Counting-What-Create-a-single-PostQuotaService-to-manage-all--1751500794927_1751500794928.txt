Solution Breakdown
1. Centralize Post Counting
What: Create a single PostQuotaService to manage all post counts, replacing the fragmented systems.
How: Move calculatePostsToGenerate, getActualPostCounts, and syncWithQuota into this service, using a unified remainingPosts and totalPosts tracked per user.
Why: Eliminates duplication from multiple counters.
2. Fix Certificate Redemption
What: Restore /api/redeem-gift-certificate to set only remainingPosts based on certificate type (14/27/52), not both.
How: Validate certificate codes, update users with subscription_source: 'certificate' and subscription_active: true, and call PostQuotaService.initializeQuota(14/27/52).
Why: Stops the 50+52=102 over-allocation.
3. Sync Stripe Logic
What: Use a single post count field in Stripe metadata.
How: Store only posts in metadata, map to remainingPosts on success, and let PostQuotaService handle totalPosts.
Why: Prevents dual processing.
4. Kill Hardcoded User ID 2
What: Dynamically assign userId in OAuth and session fallbacks.
How: Use the authenticated userâ€™s ID from the session, not a hardcoded 2.
Why: Stops post count piling on your account.
5. Eliminate Dual Deduction
What: Consolidate post deduction in PostQuotaService.
How: Remove verification service deduction, call PostQuotaService.deductPost(userId, postId) once per publish.
Why: Avoids double-dipping.
6. Compartmentalize for Stability
What: Split code into isolated modules to limit crash impact.
How: Move authRoutes.ts, apiRoutes.ts, subscriptionRoutes.ts, post-verification-service.ts, subscription-service.ts, and postCountManager.ts into separate files with clear APIs. Wrap each in try-catch, log errors to data/error.log, and use in-memory stores per module in dev.
Why: If one fails (e.g., session), others survive on Replit.
7. Test and Validate
What: Ensure gift certificate testers, subscribers, and you can force posts.
How: Test redemption (/api/redeem-gift-certificate), Stripe checkout, and /api/bulletproof-test with requireActiveSubscription. Block non-subscribers.
Why: Confirms functionality without breaking Replit.